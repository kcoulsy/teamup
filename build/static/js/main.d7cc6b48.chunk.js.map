{"version":3,"sources":["reducers/auth.ts","reducers/team.ts","reducers/user.ts","store/configure.ts","types/actions.ts","constants/config.ts","services/api.ts","actions/user.ts","actions/team.ts","actions/auth.ts","actions/initialise.ts","components/SideNav/SideNav.tsx","helpers/isLoggedIn.ts","helpers/hasTeam.ts","helpers/hasTeamRole.ts","constants/permissions.ts","types/task.ts","constants/pageRoutes.ts","components/AppLayout/AppLayout.tsx","pages/Home.tsx","components/RegisterForm/RegisterForm.tsx","constants/register.ts","helpers/containsNumber.ts","pages/Register.tsx","components/LoginForm/LoginForm.tsx","pages/Login.tsx","pages/MyProfile.tsx","components/SettingsPanel/SettingsPanel.tsx","components/UserSettings/views/ProfileSettings.tsx","components/UserSettings/views/ChangePassword.tsx","components/UserSettings/UserSettings.tsx","pages/AccountSettings.tsx","components/ProjectCard/ProjectCard.tsx","components/ProjectBrowser/ProjectBrowser.tsx","components/PageLayout/PageLayout.tsx","hooks/useToggle.ts","pages/MyProjects.tsx","pages/TeamProfile.tsx","pages/TeamProjects.tsx","components/TeamSettingsPanel/views/GeneralSettings.tsx","components/TeamSettingsPanel/views/TeamMembers.tsx","components/TeamSettingsPanel/views/TeamRoles.tsx","components/TeamSettingsPanel/views/RolePermissions.tsx","components/TeamSettingsPanel/TeamSettingsPanel.tsx","pages/TeamSettings.tsx","components/ProjectView/ProjectView.tsx","helpers/getTaskStatusColourObj.ts","components/TaskForm/TaskForm.tsx","pages/ProjectPage.tsx","helpers/mapProjectTasksToTaskRow.ts","pages/CreateTeam.tsx","components/TaskView/TaskView.tsx","pages/TaskPage.tsx","actions/task.ts","components/Router/PrivateRoute.tsx","components/Router/PublicRoute.tsx","components/Router/AppRouter.tsx","App.tsx","index.tsx"],"names":["initialState","attemptingLogin","token","loginAttemptFailed","appInitialising","appInitialised","attemptingRegister","_id","name","description","users","roles","rolePermissions","email","username","teamInvites","store","configureStore","reducer","auth","state","action","type","Object","assign","registerErrorMsg","errorMsg","team","payload","user","config","apiUrl","api","path","method","a","bodyObject","headers","localStorage","getItem","body","JSON","stringify","fetch","appConfig","response","json","userFetch","storeTeam","loginAttempt","loginSuccess","setItem","loginFail","removeItem","registerFail","MenuItemKey","length","permissionToCheck","hasTeam","teamUser","find","roleIndex","rolePerm","permissions","includes","permissionLabels","Sider","Layout","SubMenu","Menu","TaskStatus","mapDispatchToProps","startLogout","dispatch","connect","isLoggedIn","showTeamProjects","showTeamSettings","hasTeamRole","useState","collapsed","setCollapsed","HOME","selectedKeys","setSelectedKeys","history","useHistory","useEffect","LOGIN","REGISTER","collapsible","onCollapse","className","theme","defaultSelectedKeys","mode","Item","key","DEFAULT","icon","HomeOutlined","onClick","push","USER","UserOutlined","title","USER_PROJECTS","USER_SETTINGS","TEAM","TeamOutlined","TEAM_PROFILE","TEAM_PROJECTS","TEAM_SETTINGS","LOGOUT","LogoutOutlined","LoginOutlined","Content","AppLayout","children","confirm","Modal","acceptTeamInvite","Promise","resolve","reject","teamId","success","declineTeamInvite","map","message","closeText","style","marginBottom","onClose","content","okText","cancelText","onOk","notification","error","onCancel","console","log","href","header","Title","level","margin","dataSource","size","renderItem","item","startRegister","password","onFinish","label","rules","min","required","validator","_","value","test","Password","getFieldValue","htmlType","loading","Register","justify","startLogin","Login","props","MyProfile","SettingsPanel","views","selectedPanelIndex","setSelectedPanelIndex","width","view","index","viewComponent","Typography","ProfileSettings","labelCol","sm","span","md","wrapperCol","initialValues","remember","TextArea","valuePropName","getValueFromEvent","event","Array","isArray","fileList","listType","UploadOutlined","offset","ChangePassword","rule","LockOutlined","UserSettings","AccountSettings","Text","ProjectCard","hoursLeft","completion","bordered","hoverable","replace","direction","slice","percent","ProjectBrowser","projects","completionData","getCompletionPercentage","id","totalTime","complete","parseInt","toFixed","getHoursLeft","gutter","project","PageLayout","subTitle","onBack","headerButtons","prevPagePath","rest","onBackCb","undefined","extra","useToggle","setToggle","toggle","useCallback","arg","MyProjects","setProjects","setCompletionData","drawerOpen","toggleDrawer","setLoading","fetchProjects","res","estimatedCompletions","handleCreateProject","placement","EditOutlined","image","Empty","PRESENTED_IMAGE_SIMPLE","visible","to","canCreateProject","drawerVisible","leaveTeam","updateTeam","teamName","teamDesc","canUpdateTeamSettings","handleUpdate","disabled","danger","Link","Option","Select","updateTeamMemberRole","userId","removeTeamUser","teamMembers","loggedInUser","canUpdateTeamMembers","canInviteTeamMembers","canRemoveTeamMembers","Form","useForm","inviteForm","members","teamMember","permissonErrorLabel","columns","dataIndex","render","record","defaultValue","onChange","newIndex","role","then","form","layout","values","resetFields","formItemLayoutWithOutLabel","xs","updateTeamRoles","getState","canUpdateTeamRoles","teamRoles","setTeamRoles","updateRoles","validateRoles","reduce","acc","noStyle","placeholder","ev","roleName","newRoles","updateTeamRoleByIndex","currentTarget","MinusCircleOutlined","filter","idx","removeTeamRole","PlusOutlined","updateTeamPermissions","canUpdatePermissions","selectedRoleIndex","setSelectedRoleIndex","initialPermissions","targetKeys","setTargetKeys","data","entries","handleSelectChange","indexOf","handleTransferChange","showSearch","listStyle","height","operations","TeamSettings","TeamSettingsPanel","projectId","taskId","assignee","status","color","ProjectView","tasks","taskStatusLabel","NOT_STARTED","IN_PROGRESS","TESTING","PENDING_REVIEW","DONE","teamView","onFormFinish","preFilledValues","estimatedHours","keys","filterOption","inputValue","option","toUpperCase","options","canAddTeamTask","canEditTeamProject","canRemoveTeamProject","projectid","useParams","setProject","editProjectDrawerOpen","toggleEditProjectDrawer","addTaskDrawerOpen","toggleAddTaskDrawer","isOwnProject","fetchProject","projectTask","getTaskStatusColourObj","timeRemaining","mapProjectTasksToTaskRow","addTask","handleEditProjectFormFinish","tailLayout","createTeam","hasTeamFromState","Paragraph","TaskView","task","strong","ellipsis","rows","expandable","symbol","canEditOthersTasks","canDeleteOthersTasks","taskid","modalVisible","toggleModal","setTask","createdByLoggedInUser","createdBy","catch","handleEditTask","updates","e","finally","statuses","indexOfCurrentStatus","nextStatus","nextStatusLabel","ArrowRightOutlined","privateRouteRender","pathname","from","location","publicRouteRender","AppRouter","exact","CreateTeam","initialise","valid","ReactDOM","document","getElementById"],"mappings":"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","file":"static/js/main.d7cc6b48.chunk.js","sourcesContent":["\r\nimport { AuthState } from './../types/auth';\r\nimport {\r\n    APP_INITIALISING,\r\n    APP_INITIALISED,\r\n    AUTH_LOGIN_ATTEMPT,\r\n    AUTH_LOGIN_FAIL,\r\n    AUTH_LOGIN_SUCCESS,\r\n    AUTH_LOGOUT,\r\n    AUTH_REGISTER_ATTEMPT,\r\n    AUTH_REGISTER_SUCCESS,\r\n    AUTH_REGISTER_FAIL,\r\n    AppActions,\r\n} from '../types/actions';\r\n\r\nconst initialState: AuthState = {\r\n    attemptingLogin: false,\r\n    token: null,\r\n    loginAttemptFailed: false,\r\n    appInitialising: false,\r\n    appInitialised: false,\r\n    attemptingRegister: false,\r\n};\r\n\r\nexport default function authReducer(\r\n    state = initialState,\r\n    action?: AppActions\r\n) : AuthState {\r\n    switch (action?.type) {\r\n        case APP_INITIALISING:\r\n            return Object.assign({}, state, { appInitialising: true });\r\n\r\n        case APP_INITIALISED:\r\n            return Object.assign({}, state, {\r\n                appInitialised: true,\r\n                loginAttemptFailed: false,\r\n            });\r\n\r\n        case AUTH_LOGIN_ATTEMPT:\r\n            return Object.assign({}, state, {\r\n                attemptingLogin: true,\r\n                loginAttemptFailed: false,\r\n            });\r\n\r\n        case AUTH_LOGIN_SUCCESS:\r\n            return Object.assign({}, state, {\r\n                attemptingLogin: false,\r\n                token: action.token,\r\n                loginAttemptFailed: false,\r\n            });\r\n\r\n        case AUTH_LOGIN_FAIL:\r\n            return Object.assign({}, state, {\r\n                attemptingLogin: false,\r\n                token: null,\r\n                loginAttemptFailed: true,\r\n            });\r\n\r\n        case AUTH_LOGOUT:\r\n            return Object.assign({}, state, {\r\n                token: null,\r\n                attemptingLogin: false,\r\n                loginAttemptFailed: false,\r\n            });\r\n\r\n        case AUTH_REGISTER_ATTEMPT:\r\n            return Object.assign({}, state, { attemptingRegister: true });\r\n\r\n        case AUTH_REGISTER_SUCCESS:\r\n            return Object.assign({}, state, {\r\n                attemptingRegister: false,\r\n                registerErrorMsg: null,\r\n            });\r\n\r\n        case AUTH_REGISTER_FAIL:\r\n            return Object.assign({}, state, {\r\n                attemptingRegister: false,\r\n                registerErrorMsg: action.errorMsg,\r\n            });\r\n\r\n        default:\r\n            return state;\r\n    }\r\n}\r\n","import { AppActions, TEAM_MY_FETCH } from '../types/actions';\r\nimport { Team } from '../types/team';\r\n\r\nconst initialState: Team = {\r\n    _id: null,\r\n    name: '',\r\n    description: '',\r\n    users: [],\r\n    roles: [],\r\n    rolePermissions: [],\r\n};\r\n\r\nexport default (state = initialState, action?: AppActions) => {\r\n    switch (action?.type) {\r\n        case TEAM_MY_FETCH:\r\n            return Object.assign({}, state, {\r\n                _id: action.payload._id,\r\n                name: action.payload.name,\r\n                description: action.payload.description,\r\n                users: action.payload.users,\r\n                roles: action.payload.roles,\r\n                rolePermissions: action.payload.rolePermissions,\r\n            });\r\n    }\r\n\r\n    return state;\r\n};\r\n","import { AppActions } from '../types/actions';\r\nimport { User } from './../types/user';\r\nimport { USER_FETCH } from './../types/actions';\r\n\r\nconst initialState: User = {\r\n    _id: '',\r\n    email: '',\r\n    username: '',\r\n    teamInvites: [],\r\n};\r\n\r\nexport default (state = initialState, action: AppActions) => {\r\n    switch (action.type) {\r\n        case USER_FETCH:\r\n            return Object.assign({}, state, action.payload);\r\n        default:\r\n            return state;\r\n    }\r\n};\r\n","import { configureStore } from '@reduxjs/toolkit';\r\n\r\n// Import Reducers\r\nimport authReducer from '../reducers/auth';\r\nimport teamReducer from '../reducers/team';\r\nimport userReducer from '../reducers/user';\r\n\r\nconst store = configureStore({\r\n    reducer: {\r\n        // reducers here\r\n        auth: authReducer,\r\n        team: teamReducer,\r\n        user: userReducer,\r\n    },\r\n});\r\n\r\nexport type RootState = ReturnType<typeof store.getState>;\r\n\r\nexport default store;\r\n","import { User } from './user';\r\nimport { Team } from './team';\r\n\r\nexport const APP_INITIALISING = 'APP_INITIALISING';\r\nexport const APP_INITIALISED = 'APP_INITIALISED';\r\nexport const AUTH_LOGIN_ATTEMPT = 'AUTH_LOGIN_ATTEMPT';\r\nexport const AUTH_LOGIN_SUCCESS = 'AUTH_LOGIN_SUCCESS';\r\nexport const AUTH_LOGIN_FAIL = 'AUTH_LOGIN_FAIL';\r\nexport const AUTH_LOGOUT = 'AUTH_LOGOUT';\r\nexport const AUTH_REGISTER_ATTEMPT = 'AUTH_REGISTER_ATTEMPT';\r\nexport const AUTH_REGISTER_SUCCESS = 'AUTH_REGISTER_SUCCESS';\r\nexport const AUTH_REGISTER_FAIL = 'AUTH_REGISTER_FAIL';\r\nexport const TEAM_MY_FETCH = 'TEAM_MY_FETCH';\r\nexport const USER_FETCH = 'USER_FETCH';\r\n\r\nexport interface AppInitialisingAction {\r\n    type: typeof APP_INITIALISING;\r\n}\r\n\r\nexport interface AppInitialisedAction {\r\n    type: typeof APP_INITIALISED;\r\n}\r\n\r\nexport type AppActionTypes = AppInitialisingAction | AppInitialisedAction;\r\n\r\nexport interface AuthLoginAttemptAction {\r\n    type: typeof AUTH_LOGIN_ATTEMPT;\r\n}\r\n\r\nexport interface AuthLoginSuccessAction {\r\n    type: typeof AUTH_LOGIN_SUCCESS;\r\n    token: string;\r\n}\r\n\r\nexport interface AuthLoginFailAction {\r\n    type: typeof AUTH_LOGIN_FAIL;\r\n}\r\n\r\nexport interface AuthLogoutAction {\r\n    type: typeof AUTH_LOGOUT;\r\n}\r\n\r\nexport interface AuthRegisterAttemptAction {\r\n    type: typeof AUTH_REGISTER_ATTEMPT;\r\n}\r\n\r\nexport interface AuthRegisterSuccessAction {\r\n    type: typeof AUTH_REGISTER_SUCCESS;\r\n}\r\n\r\nexport interface AuthRegisterFailAction {\r\n    type: typeof AUTH_REGISTER_FAIL;\r\n    errorMsg: string;\r\n}\r\n\r\nexport interface TeamMyFetchAction {\r\n    type: typeof TEAM_MY_FETCH;\r\n    payload: Team;\r\n}\r\n\r\nexport interface UserFetchAction {\r\n    type: typeof USER_FETCH;\r\n    payload: User;\r\n}\r\n\r\nexport type AuthActionTypes =\r\n    | AuthLoginAttemptAction\r\n    | AuthLoginSuccessAction\r\n    | AuthLoginFailAction\r\n    | AuthLogoutAction\r\n    | AuthRegisterAttemptAction\r\n    | AuthRegisterSuccessAction\r\n    | AuthRegisterFailAction;\r\n\r\nexport type TeamActions = TeamMyFetchAction;\r\nexport type UserActions = UserFetchAction;\r\n\r\nexport type AppActions =\r\n    | AuthActionTypes\r\n    | AppActionTypes\r\n    | TeamActions\r\n    | UserFetchAction;\r\n","const config = {\r\n    apiUrl: '/api/',\r\n};\r\n\r\nexport default config;\r\n","import appConfig from '../constants/config';\r\nexport const API_GET = 'GET';\r\nexport const API_POST = 'POST';\r\nexport const API_PUT = 'PUT';\r\nexport const API_PATCH = 'PATCH';\r\nexport const API_DELETE = 'DELETE';\r\n\r\nexport type ApiMethod =\r\n    | typeof API_GET\r\n    | typeof API_POST\r\n    | typeof API_PUT\r\n    | typeof API_PATCH\r\n    | typeof API_DELETE;\r\n\r\ninterface configBody extends RequestInit {\r\n    method: ApiMethod;\r\n    body?: string;\r\n}\r\n\r\nexport const api = async (path: string, method: ApiMethod, bodyObject = {}) => {\r\n    const config: configBody = {\r\n        method: method,\r\n        headers: { 'Content-Type': 'application/json' },\r\n    };\r\n    const token = localStorage.getItem('userToken');\r\n\r\n    if (typeof token === 'string') {\r\n        config.headers = { ...config.headers, 'x-auth': token };\r\n    }\r\n\r\n    if (method !== API_GET) {\r\n        config.body = JSON.stringify(bodyObject);\r\n    }\r\n\r\n    const response = await fetch(appConfig.apiUrl + path, config);\r\n\r\n    return response.json();\r\n};\r\n","import { User } from './../types/user';\r\nimport { AppActions } from '../types/actions';\r\nimport { USER_FETCH } from './../types/actions';\r\nimport { Dispatch } from '@reduxjs/toolkit';\r\nimport { api } from './../services/api';\r\n\r\nexport const fetchUser = () => {\r\n    return async (dispatch: Dispatch<AppActions>) => {\r\n        try {\r\n            const { user } = await api('/user/', 'GET');\r\n\r\n            if (user) {\r\n                dispatch(userFetch(user));\r\n            }\r\n        } catch (err) {\r\n            dispatch(userFetch({ _id: '', username: '', email: '' }));\r\n        }\r\n    };\r\n};\r\n\r\nexport function userFetch(user: User): AppActions {\r\n    return {\r\n        type: USER_FETCH,\r\n        payload: user,\r\n    };\r\n}\r\n","import { TEAM_MY_FETCH, AppActions } from '../types/actions';\r\nimport { TeamMyFetchAction } from './../types/actions';\r\nimport { Dispatch } from '@reduxjs/toolkit';\r\nimport { api } from './../services/api';\r\nimport { RootState } from '../store/configure';\r\nimport { userFetch } from './user';\r\n\r\nexport function storeTeam({\r\n    _id = null,\r\n    name = null,\r\n    description = null,\r\n    users = [],\r\n    roles = [],\r\n    rolePermissions = [],\r\n}: {\r\n    _id?: string | null;\r\n    name?: string | null;\r\n    description?: string | null;\r\n    users?: any[];\r\n    roles?: string[];\r\n    rolePermissions?: any[];\r\n}): TeamMyFetchAction {\r\n    return {\r\n        type: TEAM_MY_FETCH,\r\n        payload: {\r\n            _id,\r\n            name,\r\n            description,\r\n            users,\r\n            roles,\r\n            rolePermissions,\r\n        },\r\n    };\r\n}\r\n\r\nexport const createTeam = ({\r\n    name,\r\n    description,\r\n}: {\r\n    name: string;\r\n    description: string;\r\n}) => {\r\n    return (dispatch: Dispatch<AppActions>) => {\r\n        return new Promise(async (resolve, reject) => {\r\n            const res = await api('/team/create', 'POST', {\r\n                name,\r\n                description,\r\n            });\r\n            if (res.team) {\r\n                dispatch(storeTeam(res.team));\r\n                resolve(true);\r\n            }\r\n        });\r\n    };\r\n};\r\n\r\nexport const updateTeam = ({\r\n    name,\r\n    description,\r\n}: {\r\n    name: string;\r\n    description: string;\r\n}) => {\r\n    return async (dispatch: Dispatch<AppActions>) => {\r\n        return new Promise(async (resolve, reject) => {\r\n            try {\r\n                const res = await api('/team/update', 'PUT', {\r\n                    name,\r\n                    description,\r\n                });\r\n\r\n                if (res.success) {\r\n                    dispatch(storeTeam(res.team));\r\n                    resolve(true);\r\n                }\r\n            } catch (error) {\r\n                reject(false);\r\n            }\r\n        });\r\n    };\r\n};\r\n\r\nexport const leaveTeam = () => {\r\n    return async (dispatch: Dispatch<AppActions>) => {\r\n        return new Promise(async (resolve, reject) => {\r\n            try {\r\n                const res = await api('/team/leave', 'POST');\r\n                if (!res.user.team) {\r\n                    dispatch(storeTeam({}));\r\n                    resolve(true);\r\n                }\r\n            } catch (error) {\r\n                reject(false);\r\n            }\r\n        });\r\n    };\r\n};\r\n\r\nexport const updateTeamRoles = (roles: string[]) => {\r\n    return async (\r\n        dispatch: Dispatch<AppActions>,\r\n        getState: () => RootState\r\n    ) => {\r\n        return new Promise(async (resolve, reject) => {\r\n            try {\r\n                const res = await api('/team/roles', 'POST', { roles });\r\n                const { team } = getState();\r\n\r\n                if (res.success) {\r\n                    dispatch(\r\n                        storeTeam({\r\n                            ...team,\r\n                            roles,\r\n                        })\r\n                    );\r\n                    resolve(true);\r\n                } else {\r\n                    reject(false);\r\n                }\r\n            } catch (error) {\r\n                reject(false);\r\n            }\r\n        });\r\n    };\r\n};\r\n\r\nexport const updateTeamMemberRole = (userId: string, roleIndex: number) => {\r\n    return async (dispatch: Dispatch<AppActions>) => {\r\n        return new Promise(async (resolve, reject) => {\r\n            try {\r\n                const res = await api('/team/user/update', 'POST', {\r\n                    userId,\r\n                    roleIndex,\r\n                });\r\n\r\n                if (res.success) {\r\n                    dispatch(storeTeam(res.team));\r\n                    resolve(true);\r\n                } else {\r\n                    reject(false);\r\n                }\r\n            } catch (error) {\r\n                reject(false);\r\n            }\r\n        });\r\n    };\r\n};\r\n\r\nexport const updateTeamPermissions = (\r\n    roleIndex: number,\r\n    permissions: string[]\r\n) => {\r\n    return (dispatch: Dispatch<AppActions>, getState: () => RootState) => {\r\n        return new Promise(async (resolve, reject) => {\r\n            try {\r\n                const res = await api('/team/permissions', 'POST', {\r\n                    roleIndex,\r\n                    permissions,\r\n                });\r\n\r\n                if (res.success) {\r\n                    dispatch(storeTeam(res.team));\r\n                    resolve(true);\r\n                } else {\r\n                    reject(false);\r\n                }\r\n            } catch (err) {\r\n                reject(false);\r\n            }\r\n        });\r\n    };\r\n};\r\n\r\nexport const acceptTeamInvite = (_id: string | null) => {\r\n    return (dispatch: Dispatch<AppActions>): Promise<boolean> => {\r\n        return new Promise(async (resolve, reject) => {\r\n            try {\r\n                const { success, team, user } = await api(\r\n                    '/team/accept',\r\n                    'POST',\r\n                    {\r\n                        teamId: _id,\r\n                    }\r\n                );\r\n                if (success) {\r\n                    dispatch(userFetch(user));\r\n                    dispatch(storeTeam(team));\r\n                    resolve(true);\r\n                } else {\r\n                    reject(false);\r\n                }\r\n            } catch (err) {\r\n                reject(false);\r\n            }\r\n        });\r\n    };\r\n};\r\n\r\nexport const declineTeamInvite = (_id: string | null) => {\r\n    return (dispatch: Dispatch<AppActions>): Promise<boolean> => {\r\n        return new Promise(async (resolve, reject) => {\r\n            try {\r\n                const { success, user } = await api('/team/decline', 'POST', {\r\n                    teamId: _id,\r\n                });\r\n                if (success) {\r\n                    dispatch(userFetch(user));\r\n                    resolve(true);\r\n                } else {\r\n                    resolve(false);\r\n                }\r\n            } catch (err) {\r\n                resolve(false);\r\n            }\r\n        });\r\n    };\r\n};\r\n\r\nexport const removeTeamUser = (userId: string) => {\r\n    return (dispatch: Dispatch<AppActions>): Promise<boolean> => {\r\n        return new Promise(async (resolve, reject) => {\r\n            try {\r\n                const { success, team } = await api(\r\n                    '/team/user/remove',\r\n                    'POST',\r\n                    {\r\n                        userId,\r\n                    }\r\n                );\r\n                if (success) {\r\n                    dispatch(storeTeam(team));\r\n                    resolve(true);\r\n                } else {\r\n                    resolve(false);\r\n                }\r\n            } catch (err) {\r\n                resolve(false);\r\n            }\r\n        });\r\n    };\r\n};\r\n","import {\r\n    AUTH_LOGIN_ATTEMPT,\r\n    AUTH_LOGIN_SUCCESS,\r\n    AUTH_LOGIN_FAIL,\r\n    AUTH_LOGOUT,\r\n    AUTH_REGISTER_ATTEMPT,\r\n    AUTH_REGISTER_SUCCESS,\r\n    AUTH_REGISTER_FAIL,\r\n    AppActions,\r\n} from '../types/actions';\r\nimport { api } from './../services/api';\r\nimport { Dispatch } from '@reduxjs/toolkit';\r\nimport { userFetch } from './user';\r\nimport { storeTeam } from './team';\r\n\r\nexport const startLogin = (username: string, password: string) => {\r\n    return async (dispatch: Dispatch<AppActions>) => {\r\n        dispatch(loginAttempt());\r\n\r\n        try {\r\n            const { user, token } = await api('auth/login', 'POST', {\r\n                username,\r\n                password,\r\n            });\r\n\r\n            if (token) {\r\n                dispatch(userFetch(user));\r\n                dispatch(loginSuccess(token));\r\n                dispatch(storeTeam(user.team));\r\n            } else {\r\n                dispatch(loginFail());\r\n            }\r\n        } catch (err) {\r\n            dispatch(loginFail());\r\n        }\r\n    };\r\n};\r\n\r\nexport function loginAttempt(): AppActions {\r\n    return {\r\n        type: AUTH_LOGIN_ATTEMPT,\r\n    };\r\n}\r\n\r\nexport function loginSuccess(token: string): AppActions {\r\n    localStorage.setItem('userToken', token);\r\n    return {\r\n        type: AUTH_LOGIN_SUCCESS,\r\n        token,\r\n    };\r\n}\r\n\r\nexport function loginFail(): AppActions {\r\n    localStorage.removeItem('userToken');\r\n    return {\r\n        type: AUTH_LOGIN_FAIL,\r\n    };\r\n}\r\n\r\nexport const startLogout = () => {\r\n    return async (dispatch: Dispatch<AppActions>) => {\r\n        // TODO: call api here and remove any tokens from the user.\r\n        localStorage.removeItem('userToken');\r\n        dispatch(logout());\r\n        dispatch(userFetch({ _id: '', username: '', email: '', team: '' }));\r\n        dispatch(storeTeam({}));\r\n    };\r\n};\r\n\r\nexport function logout(): AppActions {\r\n    return {\r\n        type: AUTH_LOGOUT,\r\n    };\r\n}\r\n\r\ninterface IRegister {\r\n    username: string;\r\n    email: string;\r\n    password: string;\r\n    confirm: string;\r\n}\r\n\r\nexport const startRegister = ({\r\n    username,\r\n    email,\r\n    password,\r\n    confirm,\r\n}: IRegister) => {\r\n    return async (dispatch: Dispatch<AppActions>) => {\r\n        dispatch(registerAttempt());\r\n\r\n        try {\r\n            const { success, token, user, error } = await api(\r\n                'auth/register',\r\n                'POST',\r\n                {\r\n                    username,\r\n                    email,\r\n                    password,\r\n                    confirm,\r\n                }\r\n            );\r\n\r\n            if (success) {\r\n                dispatch(registerSuccess());\r\n                dispatch(userFetch(user));\r\n                dispatch(loginSuccess(token));\r\n            } else {\r\n                dispatch(registerFail(error));\r\n            }\r\n        } catch (err) {\r\n            dispatch(registerFail('Something went wrong'));\r\n        }\r\n    };\r\n};\r\n\r\nexport function registerAttempt(): AppActions {\r\n    return {\r\n        type: AUTH_REGISTER_ATTEMPT,\r\n    };\r\n}\r\n\r\nexport function registerSuccess(): AppActions {\r\n    return {\r\n        type: AUTH_REGISTER_SUCCESS,\r\n    };\r\n}\r\n\r\nexport function registerFail(errorMsg: string): AppActions {\r\n    return {\r\n        type: AUTH_REGISTER_FAIL,\r\n        errorMsg: errorMsg,\r\n    };\r\n}\r\n","import { AppActions, APP_INITIALISED } from '../types/actions';\r\nimport { Dispatch } from '@reduxjs/toolkit';\r\nimport { RootState } from '../store/configure';\r\nimport { loginAttempt, loginSuccess, loginFail } from './auth';\r\nimport { APP_INITIALISING } from './../types/actions';\r\nimport { api } from './../services/api';\r\nimport { storeTeam } from './team';\r\nimport { userFetch } from './user';\r\n\r\nexport const initialise = () => {\r\n    return async (\r\n        dispatch: Dispatch<AppActions>,\r\n        getState: () => RootState\r\n    ) => {\r\n        if (getState().auth.appInitialising) return;\r\n\r\n        dispatch(appInitialising());\r\n\r\n        const token = localStorage.getItem('userToken');\r\n\r\n        dispatch(loginAttempt());\r\n\r\n        if (typeof token === 'string') {\r\n            const response = await api('auth/verify', 'GET');\r\n\r\n            if (response.valid) {\r\n                dispatch(loginSuccess(token));\r\n                if (response.user) {\r\n                    dispatch(userFetch(response.user));\r\n                }\r\n                const { team } = await api('team/', 'GET');\r\n                if (team && Object.keys(team).length) {\r\n                    dispatch(\r\n                        storeTeam({\r\n                            _id: team._id,\r\n                            name: team.name,\r\n                            description: team.description,\r\n                            users: team.users,\r\n                            roles: team.roles,\r\n                            rolePermissions: team.rolePermissions,\r\n                        })\r\n                    );\r\n                } else {\r\n                    dispatch(appInitialised());\r\n                }\r\n            } else {\r\n                dispatch(loginFail());\r\n                dispatch(appInitialised());\r\n            }\r\n        } else {\r\n            dispatch(loginFail());\r\n            dispatch(appInitialised());\r\n        }\r\n    };\r\n};\r\n\r\nexport function appInitialised(): AppActions {\r\n    return {\r\n        type: APP_INITIALISED,\r\n    };\r\n}\r\n\r\nexport function appInitialising(): AppActions {\r\n    return {\r\n        type: APP_INITIALISING,\r\n    };\r\n}\r\n","import React, { useState, useEffect } from 'react';\r\nimport { useHistory } from 'react-router-dom';\r\nimport { connect } from 'react-redux';\r\n\r\nimport { Layout, Menu } from 'antd';\r\nimport {\r\n    HomeOutlined,\r\n    LoginOutlined,\r\n    LogoutOutlined,\r\n    TeamOutlined,\r\n    UserOutlined,\r\n} from '@ant-design/icons';\r\nimport isLoggedIn from '../../helpers/isLoggedIn';\r\nimport { startLogout } from '../../actions/auth';\r\nimport { RootState } from '../../store/configure';\r\n\r\nimport {\r\n    PATH_HOME,\r\n    PATH_LOGIN,\r\n    PATH_REGISTER,\r\n    PATH_MY_PROFILE,\r\n    PATH_MY_PROJECTS,\r\n    PATH_ACCOUNT_SETTINGS,\r\n    PATH_TEAM_PROFILE,\r\n    PATH_TEAM_PROJECTS,\r\n    PATH_TEAM_SETTINGS,\r\n} from '../../constants/pageRoutes';\r\nimport hasTeam from '../../helpers/hasTeam';\r\nimport hasTeamRole from '../../helpers/hasTeamRole';\r\nimport { PERM_VIEW_TEAM_SETTINGS } from './../../constants/permissions';\r\n\r\nconst { Sider } = Layout;\r\nconst { SubMenu } = Menu;\r\n\r\ninterface SideNavProps {\r\n    isLoggedIn: boolean;\r\n    startLogout: Function;\r\n    showTeamProjects: boolean;\r\n    showTeamSettings: boolean;\r\n}\r\n\r\n// Have to be strings for Antd Menu\r\nenum MenuItemKey {\r\n    DEFAULT = 'default',\r\n    HOME = 'home',\r\n    LOGIN = 'login',\r\n    REGISTER = 'register',\r\n    LOGOUT = 'logout',\r\n    USER = 'user',\r\n    USER_PROFILE = 'user_profile',\r\n    USER_PROJECTS = 'user_projects',\r\n    USER_SETTINGS = 'user_settings',\r\n    TEAM = 'team',\r\n    TEAM_PROFILE = 'team_profile',\r\n    TEAM_PROJECTS = 'team_projects',\r\n    TEAM_SETTINGS = 'team_settings',\r\n}\r\n\r\nexport const SideNav: React.FunctionComponent<SideNavProps> = ({\r\n    isLoggedIn,\r\n    startLogout,\r\n    showTeamProjects,\r\n    showTeamSettings,\r\n}) => {\r\n    const [collapsed, setCollapsed] = useState(false);\r\n    const [selectedKeys, setSelectedKeys] = useState<MenuItemKey[]>([\r\n        MenuItemKey.HOME,\r\n    ]);\r\n    const history = useHistory();\r\n    useEffect(() => {\r\n        if (\r\n            isLoggedIn &&\r\n            (selectedKeys.includes(MenuItemKey.LOGIN) ||\r\n                selectedKeys.includes(MenuItemKey.REGISTER))\r\n        ) {\r\n            setSelectedKeys([MenuItemKey.HOME]);\r\n        }\r\n    }, [isLoggedIn, selectedKeys]);\r\n\r\n    return (\r\n        <Sider\r\n            collapsible\r\n            collapsed={collapsed}\r\n            onCollapse={() => setCollapsed(!collapsed)}>\r\n            <div className=\"logo\" />\r\n            {!isLoggedIn ? (\r\n                <Menu\r\n                    theme=\"dark\"\r\n                    defaultSelectedKeys={selectedKeys}\r\n                    selectedKeys={selectedKeys}\r\n                    mode=\"inline\">\r\n                    <Menu.Item\r\n                        key={MenuItemKey.DEFAULT}\r\n                        className=\"side-nav__logo\">\r\n                        TeamUp\r\n                    </Menu.Item>\r\n                    <Menu.Item\r\n                        key={MenuItemKey.LOGIN}\r\n                        icon={<LoginOutlined />}\r\n                        onClick={() => {\r\n                            setSelectedKeys([MenuItemKey.LOGIN]);\r\n                            history.push(PATH_LOGIN);\r\n                        }}>\r\n                        Login\r\n                    </Menu.Item>\r\n                    <Menu.Item\r\n                        key={MenuItemKey.REGISTER}\r\n                        icon={<LoginOutlined />}\r\n                        onClick={() => {\r\n                            setSelectedKeys([MenuItemKey.REGISTER]);\r\n                            history.push(PATH_REGISTER);\r\n                        }}>\r\n                        Register\r\n                    </Menu.Item>\r\n                </Menu>\r\n            ) : (\r\n                <Menu\r\n                    theme=\"dark\"\r\n                    defaultSelectedKeys={selectedKeys}\r\n                    selectedKeys={selectedKeys}\r\n                    mode=\"inline\">\r\n                    <Menu.Item\r\n                        key={MenuItemKey.DEFAULT}\r\n                        className=\"side-nav__logo\">\r\n                        TeamUp\r\n                    </Menu.Item>\r\n                    <Menu.Item\r\n                        key={MenuItemKey.HOME}\r\n                        icon={<HomeOutlined />}\r\n                        onClick={() => {\r\n                            setSelectedKeys([MenuItemKey.HOME]);\r\n                            history.push(PATH_HOME);\r\n                        }}>\r\n                        Dashboard\r\n                    </Menu.Item>\r\n                    <SubMenu\r\n                        key={MenuItemKey.USER}\r\n                        icon={<UserOutlined />}\r\n                        title=\"User\">\r\n                        {/* <Menu.Item\r\n                            key={MenuItemKey.USER_PROFILE}\r\n                            onClick={() => {\r\n                                setSelectedKeys([MenuItemKey.USER_PROFILE]);\r\n                                history.push(PATH_MY_PROFILE);\r\n                            }}>\r\n                            My Profile\r\n                        </Menu.Item> */}\r\n                        <Menu.Item\r\n                            key={MenuItemKey.USER_PROJECTS}\r\n                            onClick={() => {\r\n                                setSelectedKeys([MenuItemKey.USER_PROJECTS]);\r\n                                history.push(PATH_MY_PROJECTS);\r\n                            }}>\r\n                            My Projects\r\n                        </Menu.Item>\r\n                        <Menu.Item\r\n                            key={MenuItemKey.USER_SETTINGS}\r\n                            onClick={() => {\r\n                                setSelectedKeys([MenuItemKey.USER_SETTINGS]);\r\n                                history.push(PATH_ACCOUNT_SETTINGS);\r\n                            }}>\r\n                            Account Settings\r\n                        </Menu.Item>\r\n                    </SubMenu>\r\n                    <SubMenu\r\n                        key={MenuItemKey.TEAM}\r\n                        icon={<TeamOutlined />}\r\n                        title=\"Team\">\r\n                        {!showTeamProjects ? (\r\n                            <Menu.Item\r\n                                key={MenuItemKey.TEAM_PROFILE}\r\n                                onClick={() => {\r\n                                    setSelectedKeys([MenuItemKey.TEAM_PROFILE]);\r\n                                    history.push(PATH_TEAM_PROFILE);\r\n                                }}>\r\n                                My Team\r\n                            </Menu.Item>\r\n                        ) : null}\r\n\r\n                        {showTeamProjects ? (\r\n                            <Menu.Item\r\n                                key={MenuItemKey.TEAM_PROJECTS}\r\n                                onClick={() => {\r\n                                    setSelectedKeys([\r\n                                        MenuItemKey.TEAM_PROJECTS,\r\n                                    ]);\r\n                                    history.push(PATH_TEAM_PROJECTS);\r\n                                }}>\r\n                                Team Projects\r\n                            </Menu.Item>\r\n                        ) : null}\r\n                        {showTeamSettings ? (\r\n                            <Menu.Item\r\n                                key={MenuItemKey.TEAM_SETTINGS}\r\n                                onClick={() => {\r\n                                    setSelectedKeys([\r\n                                        MenuItemKey.TEAM_SETTINGS,\r\n                                    ]);\r\n                                    history.push(PATH_TEAM_SETTINGS);\r\n                                }}>\r\n                                Team Settings\r\n                            </Menu.Item>\r\n                        ) : null}\r\n                    </SubMenu>\r\n                    <Menu.Item\r\n                        key={MenuItemKey.LOGOUT}\r\n                        icon={<LogoutOutlined />}\r\n                        onClick={() => {\r\n                            setSelectedKeys([MenuItemKey.HOME]);\r\n                            startLogout();\r\n                            history.push(PATH_HOME);\r\n                        }}>\r\n                        Logout\r\n                    </Menu.Item>\r\n                </Menu>\r\n            )}\r\n        </Sider>\r\n    );\r\n};\r\n\r\nexport const mapStateToProps = (state: RootState) => {\r\n    return {\r\n        isLoggedIn: isLoggedIn(state.auth.token),\r\n        showTeamProjects: hasTeam(state),\r\n        showTeamSettings:\r\n            hasTeam(state) && hasTeamRole(state, PERM_VIEW_TEAM_SETTINGS),\r\n    };\r\n};\r\n\r\nconst mapDispatchToProps = { startLogout };\r\n\r\nexport default connect(mapStateToProps, mapDispatchToProps)(SideNav);\r\n","export default (token: string | null): boolean => typeof token === 'string' && token?.length > 0;\r\n","import { RootState } from '../store/configure';\r\n\r\nexport default (state: RootState) => {\r\n    return state.team._id !== null;\r\n};\r\n","import { RootState } from '../store/configure';\r\nimport hasTeam from './hasTeam';\r\n\r\nexport default (state: RootState, permissionToCheck: string): boolean => {\r\n    if (!hasTeam(state)) return false;\r\n\r\n    const teamUser = state.team.users.find(\r\n        ({ user }) => user._id === state.user._id\r\n    );\r\n    const roleIndex = teamUser?.roleIndex;\r\n\r\n    if (typeof roleIndex !== 'number') return false;\r\n\r\n    const rolePerm = state.team.rolePermissions.find(\r\n        (rolePerm) => rolePerm.roleIndex === roleIndex\r\n    );\r\n\r\n    return rolePerm?.permissions.includes(permissionToCheck) || false;\r\n};\r\n","export const PERM_VIEW_TEAM_SETTINGS = 'PERM_VIEW_TEAM_SETTINGS';\r\nexport const PERM_UPDATE_TEAM_DETAILS = 'PERM_UPDATE_TEAM_DETAILS';\r\nexport const PERM_INVITE_TEAM_MEMBERS = 'PERM_INVITE_TEAM_MEMBERS';\r\nexport const PERM_UPDATE_TEAM_MEMBERS = 'PERM_UPDATE_TEAM_MEMBERS';\r\nexport const PERM_REMOVE_TEAM_MEMBERS = 'PERM_REMOVE_TEAM_MEMBERS';\r\nexport const PERM_UPDATE_TEAM_ROLES = 'PERM_UPDATE_TEAM_ROLES';\r\nexport const PERM_UPDATE_TEAM_PERMS = 'PERM_UPDATE_TEAM_PERMS';\r\nexport const PERM_CREATE_TEAM_PROJECT = 'PERM_CREATE_TEAM_PROJECT';\r\nexport const PERM_EDIT_TEAM_PROJECT = 'PERM_EDIT_TEAM_PROJECT';\r\nexport const PERM_REMOVE_TEAM_PROJECT = 'PERM_REMOVE_TEAM_PROJECT';\r\nexport const PERM_ADD_TASK = 'PERM_ADD_TASK';\r\nexport const PERM_EDIT_OTHER_TASK = 'PERM_EDIT_OTHER_TASK';\r\nexport const PERM_DELETE_OTHER_TASK = 'PERM_DELETE_OTHER_TASK';\r\n\r\nexport const permissionLabels = {\r\n    [PERM_VIEW_TEAM_SETTINGS]: 'View Team Settings',\r\n    [PERM_UPDATE_TEAM_DETAILS]: 'Update Team Details',\r\n    [PERM_INVITE_TEAM_MEMBERS]: 'Invite Team Members',\r\n    [PERM_UPDATE_TEAM_MEMBERS]: 'Update Team Members',\r\n    [PERM_REMOVE_TEAM_MEMBERS]: 'Remove Team Members',\r\n    [PERM_UPDATE_TEAM_ROLES]: 'Update Team Roles',\r\n    [PERM_UPDATE_TEAM_PERMS]: 'Update Team Permissions',\r\n    [PERM_CREATE_TEAM_PROJECT]: 'Create Team Project',\r\n    [PERM_EDIT_TEAM_PROJECT]: 'Edit Team Project',\r\n    [PERM_REMOVE_TEAM_PROJECT]: 'Remove Team Project',\r\n    [PERM_ADD_TASK]: 'Add Task',\r\n    [PERM_EDIT_OTHER_TASK]: 'Edit Other Members Tasks',\r\n    [PERM_DELETE_OTHER_TASK]: 'Delete Other Members Tasks',\r\n};\r\n\r\n// So it can be imported as a single object\r\nexport default {\r\n    PERM_VIEW_TEAM_SETTINGS,\r\n    PERM_UPDATE_TEAM_DETAILS,\r\n    PERM_INVITE_TEAM_MEMBERS,\r\n    PERM_UPDATE_TEAM_MEMBERS,\r\n    PERM_REMOVE_TEAM_MEMBERS,\r\n    PERM_UPDATE_TEAM_ROLES,\r\n    PERM_UPDATE_TEAM_PERMS,\r\n    PERM_CREATE_TEAM_PROJECT,\r\n    PERM_EDIT_TEAM_PROJECT,\r\n    PERM_REMOVE_TEAM_PROJECT,\r\n    PERM_ADD_TASK,\r\n    PERM_EDIT_OTHER_TASK,\r\n    PERM_DELETE_OTHER_TASK,\r\n};\r\n","import { LiteralUnion } from 'antd/lib/_util/type';\r\nimport { PresetStatusColorType, PresetColorType } from 'antd/lib/_util/colors';\r\nimport { Project } from './project';\r\nimport { User } from './user';\r\n\r\nexport interface Task {\r\n    title: string;\r\n    description: string;\r\n    assignee?: User;\r\n    status: TaskStatusColor;\r\n    estimatedHours: string;\r\n    project: Project;\r\n    createdBy: string;\r\n}\r\n\r\nexport interface TaskRow {\r\n    key: string;\r\n    title: TaskRowTitleLink;\r\n    assignee?: User;\r\n    status: TaskStatusColor;\r\n    estimatedHours: string;\r\n}\r\n\r\nexport interface TaskRowTitleLink {\r\n    label: string;\r\n    projectId: string;\r\n    taskId: string;\r\n}\r\n\r\nexport interface TaskStatusColor {\r\n    label: string;\r\n    color: LiteralUnion<PresetColorType | PresetStatusColorType, string>;\r\n}\r\n\r\nexport enum TaskStatus {\r\n    NOT_STARTED = 'NOT_STARTED',\r\n    IN_PROGRESS = 'IN_PROGRESS',\r\n    TESTING = 'TESTING',\r\n    PENDING_REVIEW = 'PENDING_REVIEW',\r\n    DONE = 'DONE',\r\n}\r\n\r\nexport const taskStatusLabel = {\r\n    [TaskStatus.NOT_STARTED]: 'Not Started',\r\n    [TaskStatus.IN_PROGRESS]: 'In Progress',\r\n    [TaskStatus.TESTING]: 'Testing',\r\n    [TaskStatus.PENDING_REVIEW]: 'Pending Review',\r\n    [TaskStatus.DONE]: 'Done',\r\n};\r\n","export const PATH_HOME = '/';\r\nexport const PATH_LOGIN = '/login';\r\nexport const PATH_REGISTER = '/register';\r\nexport const PATH_MY_PROFILE = '/me';\r\nexport const PATH_MY_PROJECTS = '/projects';\r\nexport const PATH_ACCOUNT_SETTINGS = '/settings';\r\nexport const PATH_TEAM_PROFILE = '/team';\r\nexport const PATH_TEAM_CREATE = '/team/create';\r\nexport const PATH_TEAM_PROJECTS = '/team/projects';\r\nexport const PATH_TEAM_SETTINGS = '/team/settings';\r\nexport const PATH_PROJECT_PAGE = '/project/:projectid';\r\nexport const PATH_TASK_PAGE = '/project/:projectid/task/:taskid';\r\n","import React from 'react';\r\nimport { Layout } from 'antd';\r\nimport SideNav from './../SideNav/SideNav';\r\n\r\nconst { Content } = Layout;\r\nexport const AppLayout: React.FunctionComponent = ({ children }) => {\r\n    return (\r\n        <Layout className=\"app-layout\">\r\n            <SideNav />\r\n            <Layout>\r\n                <Content className=\"app-layout__content\">\r\n                    <div className=\"app-layout__container\">{children}</div>\r\n                </Content>\r\n            </Layout>\r\n        </Layout>\r\n    );\r\n};\r\n\r\nexport default AppLayout;\r\n","import React from 'react';\r\nimport { Card, List, Typography, Alert, Modal, notification } from 'antd';\r\nimport { Team } from './../types/team';\r\nimport { RootState } from '../store/configure';\r\n\r\nimport { acceptTeamInvite, declineTeamInvite } from '../actions/team';\r\nimport { connect } from 'react-redux';\r\n\r\nconst { confirm } = Modal;\r\n\r\ninterface HomeProps {\r\n    teamInvites: Team[];\r\n    acceptTeamInvite: Function;\r\n    declineTeamInvite: Function;\r\n}\r\n\r\nconst Home: React.FunctionComponent<HomeProps> = ({\r\n    teamInvites,\r\n    acceptTeamInvite,\r\n    declineTeamInvite,\r\n}) => {\r\n    return (\r\n        <div>\r\n            {teamInvites.map((team) => {\r\n                return (\r\n                    <Alert\r\n                        key={team._id}\r\n                        message={`You have been invited to join the team \"${team.name}\"`}\r\n                        closeText=\"Respond\"\r\n                        className=\"page__page-header\"\r\n                        style={{ marginBottom: '20px' }}\r\n                        onClose={() => {\r\n                            confirm({\r\n                                title: 'Join Team',\r\n                                content:\r\n                                    'Are you sure you want to join this team? You can only join one.',\r\n                                okText: 'Accept',\r\n                                cancelText: 'Decline',\r\n                                onOk: async () => {\r\n                                    const accepted = await acceptTeamInvite(\r\n                                        team._id\r\n                                    );\r\n                                    if (accepted) {\r\n                                        notification.success({\r\n                                            message:\r\n                                                'You have joined the team successfully!',\r\n                                        });\r\n                                    } else {\r\n                                        notification.error({\r\n                                            message:\r\n                                                'Something went wrong when joining team',\r\n                                        });\r\n                                    }\r\n                                },\r\n                                onCancel: async () => {\r\n                                    try {\r\n                                        const declined = await declineTeamInvite(\r\n                                            team._id\r\n                                        );\r\n                                        if (declined) {\r\n                                            notification.success({\r\n                                                message: `You have declined an invitation from the team \"${team.name}\".`,\r\n                                            });\r\n                                        } else {\r\n                                            notification.error({\r\n                                                message:\r\n                                                    'Something went wrong when joining team',\r\n                                            });\r\n                                        }\r\n                                    } catch (err) {\r\n                                        console.log('ERROR', err);\r\n                                    }\r\n                                },\r\n                            });\r\n                        }}\r\n                    />\r\n                );\r\n            })}\r\n            <Card title=\"Welcome!\">\r\n                <p>\r\n                    Thanks for checking out the project, the intent of this\r\n                    project is to have a full stack application as an example\r\n                    for my development skills.\r\n                </p>\r\n                <p>\r\n                    The purpose of the app is to track Projects and Tasks, for\r\n                    personal use or to use as a team. With teams there is a\r\n                    whole role and permissions system that can be customised to\r\n                    the teams requirements.\r\n                </p>\r\n                <p>\r\n                    The project is far from finished, currently in <b>v0.1</b>.\r\n                    With plenty of features planned, I will update this demo as\r\n                    major additions are added. You can check out the project on\r\n                    github <a href=\"https://github.com/kcoulsy/teamup\">here</a>.\r\n                </p>\r\n                <List\r\n                    header={\r\n                        <Typography.Title level={4} style={{ margin: 0 }}>\r\n                            Planned Features\r\n                        </Typography.Title>\r\n                    }\r\n                    dataSource={[\r\n                        'Comments on tasks for teams',\r\n                        'Work log to track time spent on tasks',\r\n                        'Activity log across teams',\r\n                        'User and team profiles',\r\n                        'Mobile Resposiveness',\r\n                    ]}\r\n                    size=\"small\"\r\n                    renderItem={(item) => <List.Item>{item}</List.Item>}></List>\r\n            </Card>\r\n        </div>\r\n    );\r\n};\r\n\r\nconst mapStateToProps = (state: RootState) => ({\r\n    teamInvites: state.user.teamInvites || [],\r\n});\r\n\r\nconst mapDispatchToProps = {\r\n    acceptTeamInvite,\r\n    declineTeamInvite,\r\n};\r\n\r\nexport default connect(mapStateToProps, mapDispatchToProps)(Home);\r\n","import React from 'react';\r\nimport { useHistory } from 'react-router-dom';\r\nimport { connect } from 'react-redux';\r\n\r\nimport { startRegister } from '../../actions/auth';\r\nimport containsNumber from '../../helpers/containsNumber';\r\nimport {\r\n    MIN_USERNAME_LENGTH,\r\n    MIN_PASS_LENGTH,\r\n} from './../../constants/register';\r\nimport { RootState } from '../../store/configure';\r\nimport { Form, Card, Input, Button } from 'antd';\r\nimport { PATH_LOGIN } from '../../constants/pageRoutes';\r\n\r\ninterface RegisterFormProps {\r\n    attemptingRegister: boolean;\r\n    errorMsg?: string;\r\n    startRegister: Function;\r\n}\r\nexport const RegisterForm: React.FunctionComponent<RegisterFormProps> = ({\r\n    attemptingRegister,\r\n    errorMsg,\r\n    startRegister,\r\n}) => {\r\n    const history = useHistory();\r\n\r\n    return (\r\n        <Card title=\"Register\" size=\"small\" className=\"register-form__card\">\r\n            <Form\r\n                onFinish={({ username, email, password, confirm }) => {\r\n                    startRegister({ username, email, password, confirm });\r\n                }}>\r\n                <Form.Item\r\n                    label=\"Username\"\r\n                    name=\"username\"\r\n                    rules={[\r\n                        {\r\n                            min: MIN_USERNAME_LENGTH,\r\n                            message: `Username must be at least ${MIN_USERNAME_LENGTH} characters`,\r\n                        },\r\n                        {\r\n                            required: true,\r\n                            message: 'Please input your username!',\r\n                        },\r\n                    ]}>\r\n                    <Input />\r\n                </Form.Item>\r\n                <Form.Item\r\n                    label=\"Email\"\r\n                    name=\"email\"\r\n                    rules={[\r\n                        {\r\n                            type: 'email',\r\n                            message: 'The input is not valid email!',\r\n                        },\r\n                        {\r\n                            required: true,\r\n                            message: 'Please input an email!',\r\n                        },\r\n                    ]}>\r\n                    <Input />\r\n                </Form.Item>\r\n                <Form.Item\r\n                    label=\"Password\"\r\n                    name=\"password\"\r\n                    rules={[\r\n                        {\r\n                            required: true,\r\n                            message: 'Please input your password!',\r\n                        },\r\n                        {\r\n                            min: MIN_PASS_LENGTH,\r\n                            message: `Password must be at least ${MIN_PASS_LENGTH} characters`,\r\n                        },\r\n                        () => ({\r\n                            validator(_, value) {\r\n                                if (containsNumber(value)) {\r\n                                    return Promise.resolve();\r\n                                }\r\n                                return Promise.reject(\r\n                                    'Your password must contain a number!'\r\n                                );\r\n                            },\r\n                        }),\r\n                    ]}>\r\n                    <Input.Password />\r\n                </Form.Item>\r\n                <Form.Item\r\n                    label=\"Confirm\"\r\n                    name=\"confirm\"\r\n                    rules={[\r\n                        {\r\n                            required: true,\r\n                            message: 'Please confirm your password!',\r\n                        },\r\n                        ({ getFieldValue }) => ({\r\n                            validator(_, value) {\r\n                                if (\r\n                                    !value ||\r\n                                    getFieldValue('password') === value\r\n                                ) {\r\n                                    return Promise.resolve();\r\n                                }\r\n                                return Promise.reject(\r\n                                    'The two passwords that you entered do not match!'\r\n                                );\r\n                            },\r\n                        }),\r\n                    ]}>\r\n                    <Input.Password />\r\n                </Form.Item>\r\n                {errorMsg ? <Form.Item>{errorMsg}</Form.Item> : null}\r\n                <Form.Item>\r\n                    <Button\r\n                        type=\"primary\"\r\n                        htmlType=\"submit\"\r\n                        loading={attemptingRegister}>\r\n                        Register\r\n                    </Button>\r\n                    <Button\r\n                        type=\"link\"\r\n                        htmlType=\"button\"\r\n                        onClick={() => history.push(PATH_LOGIN)}>\r\n                        Already registered? Click here to login\r\n                    </Button>\r\n                </Form.Item>\r\n            </Form>\r\n        </Card>\r\n    );\r\n};\r\n\r\nexport const mapStateToProps = (state: RootState) => {\r\n    return {\r\n        attemptingRegister: state.auth.attemptingRegister,\r\n        errorMsg: state.auth.registerErrorMsg,\r\n    };\r\n};\r\n\r\nconst mapDispatchToProps = { startRegister };\r\n\r\nexport default connect(mapStateToProps, mapDispatchToProps)(RegisterForm);\r\n","export const MIN_USERNAME_LENGTH = 3;\r\nexport const MIN_PASS_LENGTH = 6;","export default (val: string): boolean => /\\d/.test(val);\r\n","import React from 'react';\r\n\r\nimport RegisterForm from '../components/RegisterForm/RegisterForm';\r\nimport { Row, Col } from 'antd';\r\n\r\nconst Register: React.FunctionComponent = () => {\r\n    return (\r\n        <Row justify=\"center\">\r\n            <Col>\r\n                <RegisterForm />\r\n            </Col>\r\n        </Row>\r\n    );\r\n};\r\n\r\nexport default Register;\r\n","import React from 'react';\r\nimport { useHistory } from 'react-router-dom';\r\nimport { connect } from 'react-redux';\r\n\r\nimport { startLogin } from '../../actions/auth';\r\nimport { RootState } from '../../store/configure';\r\nimport { Card, Form, Input, Button } from 'antd';\r\nimport { PATH_REGISTER } from './../../constants/pageRoutes';\r\n\r\ninterface LoginFormProps {\r\n    startLogin: Function;\r\n    attemptingLogin: boolean;\r\n    loginAttemptFailed: boolean;\r\n}\r\n\r\nexport const LoginForm: React.FunctionComponent<LoginFormProps> = ({\r\n    startLogin,\r\n    attemptingLogin,\r\n    loginAttemptFailed,\r\n}) => {\r\n    const history = useHistory();\r\n    return (\r\n        <Card title=\"Login\" className=\"login-form__card\" size=\"small\">\r\n            <Form\r\n                onFinish={({ username, password }) =>\r\n                    startLogin(username, password)\r\n                }>\r\n                <Form.Item\r\n                    label=\"Username\"\r\n                    name=\"username\"\r\n                    rules={[\r\n                        {\r\n                            required: true,\r\n                            message: 'Please input your username!',\r\n                        },\r\n                    ]}>\r\n                    <Input />\r\n                </Form.Item>\r\n\r\n                <Form.Item\r\n                    label=\"Password\"\r\n                    name=\"password\"\r\n                    rules={[\r\n                        {\r\n                            required: true,\r\n                            message: 'Please input your password!',\r\n                        },\r\n                    ]}>\r\n                    <Input.Password />\r\n                </Form.Item>\r\n                {loginAttemptFailed ? (\r\n                    <Form.Item>\r\n                        Unable to login with those credentials\r\n                    </Form.Item>\r\n                ) : null}\r\n                <Form.Item>\r\n                    <Button\r\n                        type=\"primary\"\r\n                        htmlType=\"submit\"\r\n                        loading={attemptingLogin}>\r\n                        Login\r\n                    </Button>\r\n                    <Button\r\n                        type=\"link\"\r\n                        htmlType=\"button\"\r\n                        onClick={() => history.push(PATH_REGISTER)}>\r\n                        Not registered? Click here\r\n                    </Button>\r\n                </Form.Item>\r\n            </Form>\r\n        </Card>\r\n    );\r\n};\r\n\r\nexport const mapStateToProps = (state: RootState) => {\r\n    return {\r\n        attemptingLogin: state.auth.attemptingLogin,\r\n        loginAttemptFailed: state.auth.loginAttemptFailed,\r\n    };\r\n};\r\n\r\nconst mapDispatchToProps = { startLogin };\r\n\r\nexport default connect(mapStateToProps, mapDispatchToProps)(LoginForm);\r\n","import React from 'react';\r\n\r\nimport LoginForm from '../components/LoginForm/LoginForm';\r\nimport { Row, Col } from 'antd';\r\n\r\nconst Login: React.FunctionComponent = (props) => {\r\n    return (\r\n        <div>\r\n            <Row justify=\"center\">\r\n                <Col>\r\n                    <LoginForm {...props} />\r\n                </Col>\r\n            </Row>\r\n        </div>\r\n    );\r\n};\r\n\r\nexport default Login;\r\n","import React from 'react';\r\n\r\nconst MyProfile: React.FunctionComponent = () => {\r\n    return (\r\n        <div>\r\n            MyProfile Page\r\n        </div>\r\n    );\r\n};\r\n\r\nexport default MyProfile;\r\n","import React, { useState } from 'react';\r\n\r\nimport { Menu, Layout } from 'antd';\r\n\r\nconst { Content, Sider } = Layout;\r\n\r\nexport interface SettingsPanelView {\r\n    key: string;\r\n    label: string;\r\n    icon?: React.ReactElement;\r\n    viewComponent: React.ReactElement;\r\n}\r\n\r\ninterface SettingsPanelProps {\r\n    views: SettingsPanelView[];\r\n}\r\n\r\nconst SettingsPanel: React.FunctionComponent<SettingsPanelProps> = ({\r\n    views,\r\n}) => {\r\n    const [selectedPanelIndex, setSelectedPanelIndex] = useState<number>(0);\r\n\r\n    return (\r\n        <Layout className=\"site-layout-background settings-panel__layout\">\r\n            <Sider className=\"settings-panel__sider\" width={200}>\r\n                <Menu\r\n                    mode=\"inline\"\r\n                    defaultSelectedKeys={[views[selectedPanelIndex].key]}\r\n                    selectedKeys={[views[selectedPanelIndex].key]}\r\n                    className=\"settings-panel__menu\">\r\n                    {views.length &&\r\n                        views.map((view: SettingsPanelView, index: number) => {\r\n                            return (\r\n                                <Menu.Item\r\n                                    key={view.key}\r\n                                    icon={view.icon}\r\n                                    onClick={() => {\r\n                                        setSelectedPanelIndex(index);\r\n                                    }}>\r\n                                    {view.label}\r\n                                </Menu.Item>\r\n                            );\r\n                        })}\r\n                </Menu>\r\n            </Sider>\r\n            <Content className=\"settings-panel__content\">\r\n                {views[selectedPanelIndex].viewComponent}\r\n            </Content>\r\n        </Layout>\r\n    );\r\n};\r\n\r\nexport default SettingsPanel;\r\n","import React from 'react';\r\nimport { Form, Input, Button, Typography, Upload } from 'antd';\r\n\r\nimport { UploadOutlined } from '@ant-design/icons';\r\n\r\nconst { Title } = Typography;\r\n\r\nconst ProfileSettings: React.FunctionComponent = () => {\r\n    // great use of typescript here... thanks antd\r\n    const handleImageUpload = (event: any[] | any) => {\r\n        if (Array.isArray(event)) {\r\n            return event;\r\n        }\r\n        return event && event.fileList;\r\n    };\r\n    return (\r\n        <div>\r\n            <Title level={4} className=\"user-profile-settings__title\">\r\n                Profile Settings\r\n            </Title>\r\n            <Form\r\n                labelCol={{\r\n                    sm: {\r\n                        span: 24,\r\n                    },\r\n                    md: {\r\n                        span: 8,\r\n                    },\r\n                }}\r\n                wrapperCol={{\r\n                    sm: {\r\n                        span: 24,\r\n                    },\r\n                    md: {\r\n                        span: 12,\r\n                    },\r\n                }}\r\n                name=\"basic\"\r\n                initialValues={{ remember: true }}>\r\n                <Form.Item label=\"Full Name\" name=\"fullName\">\r\n                    <Input />\r\n                </Form.Item>\r\n\r\n                <Form.Item label=\"Occupation\" name=\"occupation\">\r\n                    <Input />\r\n                </Form.Item>\r\n                <Form.Item label=\"About Me\" name=\"bio\">\r\n                    <Input.TextArea />\r\n                </Form.Item>\r\n                <Form.Item\r\n                    name=\"upload\"\r\n                    label=\"Upload\"\r\n                    valuePropName=\"fileList\"\r\n                    getValueFromEvent={handleImageUpload}>\r\n                    <Upload\r\n                        name=\"profile\"\r\n                        action=\"/upload.do\"\r\n                        listType=\"picture\">\r\n                        <Button>\r\n                            <UploadOutlined /> Click to upload\r\n                        </Button>\r\n                    </Upload>\r\n                </Form.Item>\r\n                <Form.Item\r\n                    wrapperCol={{\r\n                        md: {\r\n                            offset: 8,\r\n                            span: 16,\r\n                        },\r\n                        sm: {\r\n                            offset: 0,\r\n                            span: 16,\r\n                        },\r\n                    }}>\r\n                    <Button type=\"primary\" htmlType=\"submit\">\r\n                        Submit\r\n                    </Button>\r\n                </Form.Item>\r\n            </Form>\r\n        </div>\r\n    );\r\n};\r\n\r\nexport default ProfileSettings;\r\n","import React from 'react';\r\nimport { Form, Input, Button, Typography } from 'antd';\r\n\r\nconst { Title } = Typography;\r\n\r\nconst ChangePassword: React.FunctionComponent = () => {\r\n    return (\r\n        <div>\r\n            <Title level={4} className=\"user-change-password__title\">\r\n                Change Password\r\n            </Title>\r\n            <Form\r\n                labelCol={{\r\n                    sm: {\r\n                        span: 24,\r\n                    },\r\n                    md: {\r\n                        span: 8,\r\n                    },\r\n                }}\r\n                wrapperCol={{\r\n                    sm: {\r\n                        span: 24,\r\n                    },\r\n                    md: {\r\n                        span: 12,\r\n                    },\r\n                }}\r\n                name=\"basic\">\r\n                <Form.Item\r\n                    label=\"Password\"\r\n                    name=\"password\"\r\n                    rules={[\r\n                        {\r\n                            required: true,\r\n                            message: 'Please input your password!',\r\n                        },\r\n                    ]}>\r\n                    <Input.Password />\r\n                </Form.Item>\r\n\r\n                <Form.Item\r\n                    label=\"Confirm\"\r\n                    name=\"confirm\"\r\n                    rules={[\r\n                        {\r\n                            required: true,\r\n                            message: 'Please confirm your password!',\r\n                        },\r\n                        ({ getFieldValue }) => ({\r\n                            validator(rule, value) {\r\n                                if (\r\n                                    !value ||\r\n                                    getFieldValue('password') === value\r\n                                ) {\r\n                                    return Promise.resolve();\r\n                                }\r\n\r\n                                return Promise.reject(\r\n                                    'The two passwords that you entered do not match!'\r\n                                );\r\n                            },\r\n                        }),\r\n                    ]}>\r\n                    <Input.Password />\r\n                </Form.Item>\r\n                <Form.Item\r\n                    wrapperCol={{\r\n                        md: {\r\n                            offset: 8,\r\n                            span: 16,\r\n                        },\r\n                        sm: {\r\n                            offset: 0,\r\n                            span: 16,\r\n                        },\r\n                    }}>\r\n                    <Button type=\"primary\" htmlType=\"submit\">\r\n                        Change Password\r\n                    </Button>\r\n                </Form.Item>\r\n            </Form>\r\n        </div>\r\n    );\r\n};\r\n\r\nexport default ChangePassword;\r\n","import React from 'react';\r\nimport SettingsPanel, {\r\n    SettingsPanelView,\r\n} from './../SettingsPanel/SettingsPanel';\r\nimport ProfileSettings from './views/ProfileSettings';\r\nimport ChangePassword from './views/ChangePassword';\r\n\r\nimport { UserOutlined, LockOutlined } from '@ant-design/icons';\r\n\r\nconst views: SettingsPanelView[] = [\r\n    {\r\n        key: 'profile-settings',\r\n        label: 'Profile Settings',\r\n        icon: <UserOutlined />,\r\n        viewComponent: <ProfileSettings />,\r\n    },\r\n    {\r\n        key: 'change-password',\r\n        label: 'Change Password',\r\n        icon: <LockOutlined />,\r\n        viewComponent: <ChangePassword />,\r\n    },\r\n];\r\n\r\nconst UserSettings: React.FunctionComponent = () => {\r\n    return <SettingsPanel views={views} />;\r\n};\r\n\r\nexport default UserSettings;\r\n","import React from 'react';\r\nimport { PageHeader } from 'antd';\r\nimport UserSettings from '../components/UserSettings/UserSettings';\r\n\r\nconst AccountSettings: React.FunctionComponent = () => {\r\n    return (\r\n        <div>\r\n            <PageHeader\r\n                className=\"page__page-header\"\r\n                title=\"Account Settings\"\r\n            />\r\n            <UserSettings />\r\n        </div>\r\n    );\r\n};\r\n\r\nexport default AccountSettings;\r\n","import React from 'react';\r\nimport { Card, Progress, Typography, Space } from 'antd';\r\nimport { useHistory } from 'react-router-dom';\r\n\r\nconst { Text } = Typography;\r\n\r\ninterface ProjectCardProps {\r\n    _id: string;\r\n    title: string;\r\n    description?: string;\r\n    hoursLeft: number;\r\n    completion: number;\r\n}\r\n\r\nconst ProjectCard: React.FunctionComponent<ProjectCardProps> = ({\r\n    _id,\r\n    title,\r\n    description = '',\r\n    hoursLeft,\r\n    completion,\r\n}) => {\r\n    const history = useHistory();\r\n    const handleClick = () => {\r\n        history.replace(`/project/${_id}`);\r\n    };\r\n    return (\r\n        <Card\r\n            title={title}\r\n            bordered={false}\r\n            className=\"project-card\"\r\n            size=\"small\"\r\n            hoverable\r\n            onClick={handleClick}>\r\n            <Space direction=\"vertical\" className=\"project-card__space\">\r\n                <Text type=\"secondary\" className=\"project-card__description\">\r\n                    {description.length > 100\r\n                        ? description?.slice(0, 100) + '...'\r\n                        : description}\r\n                </Text>\r\n                <Text className=\"project-card__hours-remaining\">\r\n                    {`${hoursLeft} hours left`}\r\n                </Text>\r\n                <Progress percent={completion} />\r\n            </Space>\r\n        </Card>\r\n    );\r\n};\r\nexport default ProjectCard;\r\n","import React from 'react';\r\nimport { Col, Row } from 'antd';\r\nimport ProjectCard from './../ProjectCard/ProjectCard';\r\nimport { Project } from './../../types/project';\r\n\r\nconst ProjectBrowser: React.FunctionComponent<{\r\n    projects: Project[];\r\n    completionData: any;\r\n}> = ({ projects, completionData }) => {\r\n    function getCompletionPercentage(id: string) {\r\n        if (!completionData[id]) return 0;\r\n        if (completionData[id].totalTime === 0) return 0;\r\n        const { complete, totalTime } = completionData[id];\r\n        return parseInt(((complete / totalTime) * 100).toFixed(2), 10);\r\n    }\r\n    function getHoursLeft(id: string) {\r\n        if (!completionData[id]) return 0;\r\n        if (completionData[id].totalTime === 0) return 0;\r\n        const { complete, totalTime } = completionData[id];\r\n        return totalTime - complete;\r\n    }\r\n    return (\r\n        <div className=\"site-card-wrapper\">\r\n            <Row gutter={16}>\r\n                <Col span={8}>\r\n                    {projects.map((project, index) => {\r\n                        if (index % 3 === 0) {\r\n                            return (\r\n                                <ProjectCard\r\n                                    _id={project._id}\r\n                                    key={index}\r\n                                    title={project.title}\r\n                                    description={project.description}\r\n                                    hoursLeft={getHoursLeft(project._id)}\r\n                                    completion={getCompletionPercentage(\r\n                                        project._id\r\n                                    )}\r\n                                />\r\n                            );\r\n                        }\r\n                        return null;\r\n                    })}\r\n                </Col>\r\n                <Col span={8}>\r\n                    {projects.map((project, index) => {\r\n                        if (index % 3 === 1) {\r\n                            return (\r\n                                <ProjectCard\r\n                                    _id={project._id}\r\n                                    key={index}\r\n                                    title={project.title}\r\n                                    description={project.description}\r\n                                    hoursLeft={getHoursLeft(project._id)}\r\n                                    completion={getCompletionPercentage(\r\n                                        project._id\r\n                                    )}\r\n                                />\r\n                            );\r\n                        }\r\n                        return null;\r\n                    })}\r\n                </Col>\r\n                <Col span={8}>\r\n                    {projects.map((project, index) => {\r\n                        if (index % 3 === 2) {\r\n                            return (\r\n                                <ProjectCard\r\n                                    _id={project._id}\r\n                                    key={index}\r\n                                    title={project.title}\r\n                                    description={project.description}\r\n                                    hoursLeft={getHoursLeft(project._id)}\r\n                                    completion={getCompletionPercentage(\r\n                                        project._id\r\n                                    )}\r\n                                />\r\n                            );\r\n                        }\r\n                        return null;\r\n                    })}\r\n                </Col>\r\n            </Row>\r\n        </div>\r\n    );\r\n};\r\n\r\nexport default ProjectBrowser;\r\n","import React from 'react';\r\nimport { PageHeader, Spin } from 'antd';\r\nimport { useHistory } from 'react-router-dom';\r\n\r\ninterface PageLayoutProps {\r\n    title?: string;\r\n    subTitle?: string;\r\n    onBack?: Function;\r\n    headerButtons?: React.ReactNode[];\r\n    prevPagePath?: string;\r\n    loading: boolean;\r\n}\r\n\r\nconst PageLayout: React.FC<PageLayoutProps> = ({\r\n    title,\r\n    subTitle,\r\n    onBack,\r\n    headerButtons,\r\n    prevPagePath,\r\n    loading = false,\r\n    children,\r\n    ...rest\r\n}) => {\r\n    const history = useHistory();\r\n\r\n    let onBackCb = undefined;\r\n\r\n    if (typeof onBack !== 'undefined' || prevPagePath) {\r\n        onBackCb = () => {\r\n            if (typeof onBack !== 'undefined') {\r\n                onBack();\r\n            }\r\n            if (prevPagePath) {\r\n                history.push(prevPagePath);\r\n            }\r\n        };\r\n    }\r\n\r\n    return (\r\n        <>\r\n            <PageHeader\r\n                className=\"page__page-header\"\r\n                title={title}\r\n                subTitle={subTitle}\r\n                onBack={onBackCb}\r\n                extra={headerButtons}\r\n                {...rest}\r\n            />\r\n            {loading ? (\r\n                <div className=\"page-layout__loader-container\">\r\n                    <Spin />\r\n                </div>\r\n            ) : (\r\n                children\r\n            )}\r\n        </>\r\n    );\r\n};\r\n\r\nexport default PageLayout;\r\n","import { useState, useCallback } from 'react';\r\n\r\n// returned toggle function has any type for argument so that it can be used anywhere.\r\n// It will only work if passing in a boolean and will set it to that value\r\nconst useToggle = (\r\n    initialState: boolean = false\r\n): [boolean, (newState?: any) => void] => {\r\n    const [state, setToggle] = useState(initialState);\r\n    const toggle = useCallback((arg) => {\r\n        if (typeof arg === 'boolean') {\r\n            setToggle(arg);\r\n        } else {\r\n            setToggle((state) => !state);\r\n        }\r\n    }, []);\r\n\r\n    return [state, toggle];\r\n};\r\n\r\nexport default useToggle;\r\n","import React, { useEffect, useState } from 'react';\r\nimport { Button, Drawer, Form, Input, notification, Empty } from 'antd';\r\nimport ProjectBrowser from '../components/ProjectBrowser/ProjectBrowser';\r\nimport { api } from './../services/api';\r\nimport { EditOutlined } from '@ant-design/icons';\r\nimport { Project } from './../types/project';\r\nimport { Store } from 'antd/lib/form/interface';\r\nimport PageLayout from './../components/PageLayout/PageLayout';\r\nimport useToggle from './../hooks/useToggle';\r\n\r\nconst MyProjects: React.FunctionComponent = () => {\r\n    const [projects, setProjects] = useState<Project[]>([]);\r\n    const [completionData, setCompletionData] = useState({});\r\n    const [drawerOpen, toggleDrawer] = useToggle();\r\n    const [loading, setLoading] = useState(false);\r\n\r\n    const fetchProjects = async () => {\r\n        try {\r\n            setLoading(true);\r\n            const res = await api('/project', 'GET');\r\n            if (res) {\r\n                setLoading(false);\r\n                setProjects(res.projects);\r\n                setCompletionData(res.estimatedCompletions);\r\n            }\r\n        } catch (err) {\r\n            setLoading(false);\r\n        }\r\n    };\r\n\r\n    useEffect(() => {\r\n        fetchProjects();\r\n    }, []);\r\n\r\n    const handleCreateProject = async ({ title, description }: Store) => {\r\n        const res = await api('/project', 'POST', {\r\n            title,\r\n            description,\r\n        });\r\n        if (res.project) {\r\n            setProjects([...projects, res.project]);\r\n            toggleDrawer(false);\r\n            notification.success({\r\n                message: 'Project created successfully!',\r\n                placement: 'bottomRight',\r\n            });\r\n        }\r\n    };\r\n\r\n    return (\r\n        <>\r\n            <PageLayout\r\n                title=\"My Projects\"\r\n                loading={loading}\r\n                headerButtons={[\r\n                    <Button key=\"3\" onClick={toggleDrawer}>\r\n                        Create Project <EditOutlined />\r\n                    </Button>,\r\n                ]}>\r\n                {!projects.length ? (\r\n                    <Empty\r\n                        image={Empty.PRESENTED_IMAGE_SIMPLE}\r\n                        description={<span>No projects found.</span>}>\r\n                        <Button type=\"primary\" onClick={toggleDrawer}>\r\n                            Create Now\r\n                        </Button>\r\n                    </Empty>\r\n                ) : (\r\n                    <ProjectBrowser\r\n                        projects={projects}\r\n                        completionData={completionData}\r\n                    />\r\n                )}\r\n            </PageLayout>\r\n\r\n            <Drawer\r\n                title=\"Create Project\"\r\n                visible={drawerOpen}\r\n                onClose={toggleDrawer}\r\n                width=\"450\">\r\n                <Form\r\n                    name=\"createProject\"\r\n                    labelCol={{\r\n                        span: 5,\r\n                    }}\r\n                    wrapperCol={{\r\n                        span: 19,\r\n                    }}\r\n                    onFinish={handleCreateProject}>\r\n                    <Form.Item\r\n                        label=\"Title\"\r\n                        name=\"title\"\r\n                        rules={[\r\n                            {\r\n                                required: true,\r\n                                message: 'You must have a project title.',\r\n                            },\r\n                            {\r\n                                min: 3,\r\n                                message:\r\n                                    'Your title must be at least 3 characters.',\r\n                            },\r\n                        ]}>\r\n                        <Input />\r\n                    </Form.Item>\r\n                    <Form.Item label=\"Description\" name=\"description\">\r\n                        <Input.TextArea />\r\n                    </Form.Item>\r\n\r\n                    <Form.Item>\r\n                        <Button type=\"primary\" htmlType=\"submit\">\r\n                            Create Project\r\n                        </Button>\r\n                    </Form.Item>\r\n                </Form>\r\n            </Drawer>\r\n        </>\r\n    );\r\n};\r\n\r\nexport default MyProjects;\r\n","import React from 'react';\r\nimport { RootState } from '../store/configure';\r\nimport { connect } from 'react-redux';\r\nimport hasTeam from '../helpers/hasTeam';\r\nimport { Alert, Button, Row, Col } from 'antd';\r\nimport { useHistory, Redirect } from 'react-router-dom';\r\nimport { PATH_TEAM_CREATE } from '../constants/pageRoutes';\r\nimport { PATH_TEAM_PROJECTS } from './../constants/pageRoutes';\r\n\r\ninterface TeamProfileProps {\r\n    hasTeam: boolean;\r\n}\r\n\r\nconst TeamProfile: React.FunctionComponent<TeamProfileProps> = ({\r\n    hasTeam,\r\n}) => {\r\n    const history = useHistory();\r\n    if (!hasTeam) {\r\n        return (\r\n            <div>\r\n                <Row justify=\"center\">\r\n                    <Col>\r\n                        <Alert\r\n                            message=\"You do not have a team! Contact your project manager for an\r\n                            invite or create a team here\"></Alert>\r\n                    </Col>\r\n                </Row>\r\n                <Row justify=\"center\">\r\n                    <Col>\r\n                        <Button\r\n                            className=\"page-team-profile__create-team-button\"\r\n                            onClick={() => history.push(PATH_TEAM_CREATE)}>\r\n                            Create Team\r\n                        </Button>\r\n                    </Col>\r\n                </Row>\r\n            </div>\r\n        );\r\n    }\r\n    return <Redirect to={PATH_TEAM_PROJECTS} />;\r\n};\r\n\r\nconst mapStateToProps = (state: RootState) => ({\r\n    hasTeam: hasTeam(state),\r\n});\r\n\r\nexport default connect(mapStateToProps)(TeamProfile);\r\n","import React, { useEffect, useState } from 'react';\r\nimport { Button, Drawer, Form, Input, notification, Empty } from 'antd';\r\nimport ProjectBrowser from '../components/ProjectBrowser/ProjectBrowser';\r\nimport { api } from './../services/api';\r\nimport { EditOutlined } from '@ant-design/icons';\r\nimport { Project } from './../types/project';\r\nimport { RootState } from '../store/configure';\r\nimport { PERM_CREATE_TEAM_PROJECT } from './../constants/permissions';\r\nimport hasTeamRole from '../helpers/hasTeamRole';\r\nimport { connect } from 'react-redux';\r\nimport PageLayout from '../components/PageLayout/PageLayout';\r\nimport useToggle from './../hooks/useToggle';\r\n\r\ninterface TeamProjectsProps {\r\n    canCreateProject: boolean;\r\n}\r\n\r\nconst TeamProjects = ({ canCreateProject }: TeamProjectsProps) => {\r\n    const [projects, setProjects] = useState<Project[]>([]);\r\n    const [completionData, setCompletionData] = useState({});\r\n    const [drawerVisible, toggleDrawer] = useToggle();\r\n\r\n    const [loading, setLoading] = useState(false);\r\n\r\n    const fetchProjects = async () => {\r\n        try {\r\n            setLoading(true);\r\n            const res = await api('/project?team=true', 'GET');\r\n            if (res) {\r\n                setLoading(false);\r\n                setProjects(res.projects);\r\n                setCompletionData(res.estimatedCompletions);\r\n            }\r\n        } catch (err) {\r\n            setLoading(false);\r\n        }\r\n    };\r\n\r\n    useEffect(() => {\r\n        fetchProjects();\r\n    }, []);\r\n\r\n    const headerButtons = [];\r\n    if (canCreateProject) {\r\n        headerButtons.push(\r\n            <Button key=\"3\" onClick={toggleDrawer}>\r\n                Create Project <EditOutlined />\r\n            </Button>\r\n        );\r\n    }\r\n    return (\r\n        <>\r\n            <PageLayout\r\n                title=\"Team Projects\"\r\n                loading={loading}\r\n                headerButtons={headerButtons}>\r\n                {!projects.length ? (\r\n                    <Empty\r\n                        image={Empty.PRESENTED_IMAGE_SIMPLE}\r\n                        description={<span>No projects found.</span>}>\r\n                        <Button type=\"primary\" onClick={toggleDrawer}>\r\n                            Create Now\r\n                        </Button>\r\n                    </Empty>\r\n                ) : (\r\n                    <ProjectBrowser\r\n                        projects={projects}\r\n                        completionData={completionData}\r\n                    />\r\n                )}\r\n            </PageLayout>\r\n            <Drawer\r\n                title=\"Create Project\"\r\n                visible={drawerVisible}\r\n                onClose={toggleDrawer}\r\n                width=\"450\">\r\n                <Form\r\n                    name=\"createProject\"\r\n                    labelCol={{\r\n                        span: 5,\r\n                    }}\r\n                    wrapperCol={{\r\n                        span: 19,\r\n                    }}\r\n                    onFinish={async ({ title, description }) => {\r\n                        const res = await api('/project/?team=true', 'POST', {\r\n                            title,\r\n                            description,\r\n                        });\r\n                        if (res.project) {\r\n                            setProjects([...projects, res.project]);\r\n                            toggleDrawer(false);\r\n                            notification.success({\r\n                                message: 'Project created successfully!',\r\n                                placement: 'bottomRight',\r\n                            });\r\n                        }\r\n                    }}>\r\n                    <Form.Item\r\n                        label=\"Title\"\r\n                        name=\"title\"\r\n                        rules={[\r\n                            {\r\n                                required: true,\r\n                                message: 'You must have a project title.',\r\n                            },\r\n                            {\r\n                                min: 3,\r\n                                message:\r\n                                    'Your title must be at least 3 characters.',\r\n                            },\r\n                        ]}>\r\n                        <Input />\r\n                    </Form.Item>\r\n                    <Form.Item label=\"Description\" name=\"description\">\r\n                        <Input.TextArea />\r\n                    </Form.Item>\r\n\r\n                    <Form.Item>\r\n                        <Button type=\"primary\" htmlType=\"submit\">\r\n                            Create Project\r\n                        </Button>\r\n                    </Form.Item>\r\n                </Form>\r\n            </Drawer>\r\n        </>\r\n    );\r\n};\r\n\r\nconst mapStateToProps = (state: RootState) => ({\r\n    canCreateProject: hasTeamRole(state, PERM_CREATE_TEAM_PROJECT),\r\n});\r\n\r\nexport default connect(mapStateToProps)(TeamProjects);\r\n","import React from 'react';\r\nimport { Form, Input, Button, notification, Modal, PageHeader } from 'antd';\r\nimport { updateTeam, leaveTeam } from './../../../actions/team';\r\nimport { connect } from 'react-redux';\r\nimport { useHistory } from 'react-router-dom';\r\nimport { PATH_HOME } from './../../../constants/pageRoutes';\r\nimport { RootState } from '../../../store/configure';\r\nimport hasTeamRole from '../../../helpers/hasTeamRole';\r\nimport { PERM_UPDATE_TEAM_DETAILS } from '../../../constants/permissions';\r\nimport { Store } from 'antd/lib/form/interface';\r\n\r\nconst { confirm } = Modal;\r\n\r\ninterface GeneralSettingsProps {\r\n    teamName: string | null;\r\n    teamDesc: string | null;\r\n    updateTeam: Function;\r\n    leaveTeam: Function;\r\n    canUpdateTeamSettings: boolean;\r\n}\r\nconst GeneralSettings: React.FunctionComponent<GeneralSettingsProps> = ({\r\n    teamName,\r\n    teamDesc,\r\n    updateTeam,\r\n    leaveTeam,\r\n    canUpdateTeamSettings,\r\n}) => {\r\n    const history = useHistory();\r\n    const handleUpdate = async ({ teamName, teamDesc }: Store) => {\r\n        const success = await updateTeam({\r\n            name: teamName,\r\n            description: teamDesc,\r\n        });\r\n        if (success) {\r\n            notification.success({\r\n                message: 'Team updated successfully!',\r\n                placement: 'bottomRight',\r\n            });\r\n        } else {\r\n            notification.error({\r\n                message: 'Something went wrong updating team!',\r\n                placement: 'bottomRight',\r\n            });\r\n        }\r\n    };\r\n    return (\r\n        <div>\r\n            <PageHeader\r\n                title=\"General Settings\"\r\n                subTitle={\r\n                    !canUpdateTeamSettings\r\n                        ? 'You do not have permissions to update team settings.'\r\n                        : undefined\r\n                }\r\n                className=\"team-settings__page-header\"\r\n            />\r\n            <Form\r\n                labelCol={{\r\n                    sm: {\r\n                        span: 24,\r\n                    },\r\n                    md: {\r\n                        span: 8,\r\n                    },\r\n                }}\r\n                wrapperCol={{\r\n                    sm: {\r\n                        span: 24,\r\n                    },\r\n                    md: {\r\n                        span: 12,\r\n                    },\r\n                }}\r\n                name=\"teamGeneral\"\r\n                initialValues={{ teamName, teamDesc }}\r\n                onFinish={handleUpdate}>\r\n                <Form.Item label=\"Team Name\" name=\"teamName\">\r\n                    <Input disabled={!canUpdateTeamSettings} />\r\n                </Form.Item>\r\n\r\n                <Form.Item label=\"Team Description\" name=\"teamDesc\">\r\n                    <Input.TextArea disabled={!canUpdateTeamSettings} />\r\n                </Form.Item>\r\n\r\n                <Form.Item\r\n                    wrapperCol={{\r\n                        md: {\r\n                            offset: 8,\r\n                            span: 16,\r\n                        },\r\n                        sm: {\r\n                            offset: 0,\r\n                            span: 16,\r\n                        },\r\n                    }}>\r\n                    <Button\r\n                        type=\"primary\"\r\n                        htmlType=\"submit\"\r\n                        disabled={!canUpdateTeamSettings}>\r\n                        Submit\r\n                    </Button>\r\n                </Form.Item>\r\n            </Form>\r\n            <Button\r\n                danger\r\n                onClick={async () => {\r\n                    confirm({\r\n                        title: 'Leave Team?',\r\n                        content:\r\n                            'Leaving the team will prevent you from accessing the teams projects.',\r\n                        onOk: async () => {\r\n                            const done = await leaveTeam();\r\n                            if (done) {\r\n                                notification.success({\r\n                                    message: 'Successfully left the team',\r\n                                });\r\n                                history.push(PATH_HOME);\r\n                            }\r\n                        },\r\n                    });\r\n                }}>\r\n                Leave Team\r\n            </Button>\r\n        </div>\r\n    );\r\n};\r\n\r\nconst mapStateToProps = (state: RootState) => ({\r\n    teamName: state.team.name,\r\n    teamDesc: state.team.description,\r\n    canUpdateTeamSettings: hasTeamRole(state, PERM_UPDATE_TEAM_DETAILS),\r\n});\r\n\r\nconst mapDispatchToProps = {\r\n    leaveTeam,\r\n    updateTeam,\r\n};\r\n\r\nexport default connect(mapStateToProps, mapDispatchToProps)(GeneralSettings);\r\n","import React from 'react';\r\nimport {\r\n    Table,\r\n    Typography,\r\n    Space,\r\n    Select,\r\n    Form,\r\n    Input,\r\n    Button,\r\n    notification,\r\n    PageHeader,\r\n} from 'antd';\r\nimport { api } from './../../../services/api';\r\nimport { RootState } from '../../../store/configure';\r\nimport { connect } from 'react-redux';\r\nimport { updateTeamMemberRole, removeTeamUser } from '../../../actions/team';\r\nimport { User } from './../../../types/user';\r\nimport hasTeamRole from '../../../helpers/hasTeamRole';\r\nimport { PERM_UPDATE_TEAM_MEMBERS } from '../../../constants/permissions';\r\nimport {\r\n    PERM_INVITE_TEAM_MEMBERS,\r\n    PERM_REMOVE_TEAM_MEMBERS,\r\n} from './../../../constants/permissions';\r\n\r\nconst { Title, Link, Text } = Typography;\r\nconst { Option } = Select;\r\n\r\ninterface TeamMemberTableRowData {\r\n    key: string;\r\n    name: string;\r\n    roleIndex: number;\r\n}\r\n\r\ninterface TeamMemberProps {\r\n    teamMembers: any[];\r\n    roles: string[];\r\n    updateTeamMemberRole: Function;\r\n    removeTeamUser: Function;\r\n    loggedInUser: User;\r\n    canInviteTeamMembers: boolean;\r\n    canUpdateTeamMembers: boolean;\r\n    canRemoveTeamMembers: boolean;\r\n}\r\n\r\nconst TeamMembers: React.FunctionComponent<TeamMemberProps> = ({\r\n    teamMembers,\r\n    roles,\r\n    updateTeamMemberRole,\r\n    removeTeamUser,\r\n    loggedInUser,\r\n    canInviteTeamMembers,\r\n    canUpdateTeamMembers,\r\n    canRemoveTeamMembers,\r\n}) => {\r\n    const [inviteForm] = Form.useForm();\r\n    const members: TeamMemberTableRowData[] = teamMembers.map((teamMember) => {\r\n        return {\r\n            key: teamMember.user._id,\r\n            name: teamMember.user.email,\r\n            roleIndex: teamMember.roleIndex,\r\n        };\r\n    });\r\n    let permissonErrorLabel: string | undefined = undefined;\r\n    if (!canUpdateTeamMembers && !canRemoveTeamMembers) {\r\n        permissonErrorLabel =\r\n            'You do not have permissions to update or remove team members.';\r\n    } else if (!canUpdateTeamMembers) {\r\n        permissonErrorLabel =\r\n            'You do not have permissions to update team members.';\r\n    } else if (!canRemoveTeamMembers) {\r\n        permissonErrorLabel =\r\n            'You do not have permissions to remove team members.';\r\n    }\r\n\r\n    return (\r\n        <div>\r\n            <PageHeader\r\n                title=\"Team Members\"\r\n                subTitle={permissonErrorLabel}\r\n                className=\"team-settings__page-header\"\r\n            />\r\n            <Table\r\n                dataSource={members}\r\n                columns={[\r\n                    {\r\n                        title: 'Name',\r\n                        dataIndex: 'name',\r\n                        key: 'name',\r\n                    },\r\n                    {\r\n                        title: 'Role',\r\n                        dataIndex: 'role',\r\n                        key: 'role',\r\n                        render: (_: any, record: TeamMemberTableRowData) => {\r\n                            if (\r\n                                loggedInUser._id !== record.key &&\r\n                                canUpdateTeamMembers\r\n                            ) {\r\n                                return (\r\n                                    <Select\r\n                                        defaultValue={roles[record.roleIndex]}\r\n                                        onChange={async (value) => {\r\n                                            let newIndex = parseInt(value, 10);\r\n                                            const updated = await updateTeamMemberRole(\r\n                                                record.key,\r\n                                                newIndex\r\n                                            );\r\n                                            if (updated) {\r\n                                                notification.success({\r\n                                                    message: `User ${record.name} updated to role ${roles[newIndex]}`,\r\n                                                    placement: 'bottomRight',\r\n                                                });\r\n                                            }\r\n                                        }}>\r\n                                        {roles.map((role, index) => {\r\n                                            return (\r\n                                                <Option\r\n                                                    key={role}\r\n                                                    value={index}>\r\n                                                    {role}\r\n                                                </Option>\r\n                                            );\r\n                                        })}\r\n                                    </Select>\r\n                                );\r\n                            }\r\n                            return roles[record.roleIndex];\r\n                        },\r\n                    },\r\n                    {\r\n                        title: 'Actions',\r\n                        dataIndex: 'actions',\r\n                        key: 'actions',\r\n                        render: (_: any, record: TeamMemberTableRowData) => {\r\n                            if (\r\n                                loggedInUser._id !== record.key &&\r\n                                canRemoveTeamMembers\r\n                            ) {\r\n                                return (\r\n                                    <Space size=\"middle\">\r\n                                        <Link\r\n                                            onClick={async () => {\r\n                                                removeTeamUser(record.key).then(\r\n                                                    () => {\r\n                                                        notification.success({\r\n                                                            message: `${record.name} successfully removed from the team!`,\r\n                                                            placement:\r\n                                                                'bottomRight',\r\n                                                        });\r\n                                                    }\r\n                                                );\r\n                                            }}>\r\n                                            Remove\r\n                                        </Link>\r\n                                    </Space>\r\n                                );\r\n                            }\r\n                            return null;\r\n                        },\r\n                    },\r\n                ]}\r\n                size=\"middle\"\r\n            />\r\n            <Title level={4} className=\"team-team-members__invite-title\">\r\n                Invite Member\r\n            </Title>\r\n            {canInviteTeamMembers ? (\r\n                <Form\r\n                    form={inviteForm}\r\n                    layout=\"inline\"\r\n                    name=\"invite\"\r\n                    initialValues={{ remember: true }}\r\n                    onFinish={async (values) => {\r\n                        const res = await api('/team/invite', 'POST', {\r\n                            email: values.email,\r\n                        });\r\n\r\n                        if (res.success) {\r\n                            notification.success({\r\n                                message: res.message,\r\n                                placement: 'bottomRight',\r\n                            });\r\n                        } else {\r\n                            notification.error({\r\n                                message: res.message,\r\n                                placement: 'bottomRight',\r\n                            });\r\n                        }\r\n                        inviteForm.resetFields();\r\n                    }}>\r\n                    <Form.Item label=\"Email\" name=\"email\">\r\n                        <Input />\r\n                    </Form.Item>\r\n                    <Form.Item>\r\n                        <Button type=\"primary\" htmlType=\"submit\">\r\n                            Invite\r\n                        </Button>\r\n                    </Form.Item>\r\n                </Form>\r\n            ) : (\r\n                <Text>You do not have permissions to invite team members.</Text>\r\n            )}\r\n        </div>\r\n    );\r\n};\r\n\r\nconst mapStateToProps = (state: RootState) => ({\r\n    teamMembers: state.team.users,\r\n    roles: state.team.roles,\r\n    loggedInUser: state.user,\r\n    canUpdateTeamMembers: hasTeamRole(state, PERM_UPDATE_TEAM_MEMBERS),\r\n    canInviteTeamMembers: hasTeamRole(state, PERM_INVITE_TEAM_MEMBERS),\r\n    canRemoveTeamMembers: hasTeamRole(state, PERM_REMOVE_TEAM_MEMBERS),\r\n});\r\n\r\nconst mapDispatchToProps = {\r\n    updateTeamMemberRole,\r\n    removeTeamUser,\r\n};\r\n\r\nexport default connect(mapStateToProps, mapDispatchToProps)(TeamMembers);\r\n","import React, { useState } from 'react';\r\nimport { Form, Input, Button, notification, PageHeader } from 'antd';\r\nimport { MinusCircleOutlined, PlusOutlined } from '@ant-design/icons';\r\nimport { RootState } from '../../../store/configure';\r\nimport { connect } from 'react-redux';\r\nimport { updateTeamRoles } from '../../../actions/team';\r\nimport hasTeamRole from '../../../helpers/hasTeamRole';\r\nimport { PERM_UPDATE_TEAM_ROLES } from '../../../constants/permissions';\r\n\r\nconst formItemLayoutWithOutLabel = {\r\n    wrapperCol: {\r\n        xs: { span: 24, offset: 0 },\r\n        sm: { span: 20, offset: 4 },\r\n    },\r\n};\r\n\r\ninterface TeamRolesProps {\r\n    roles: string[];\r\n    updateTeamRoles: Function;\r\n    canUpdateTeamRoles: boolean;\r\n}\r\n\r\nconst TeamRoles: React.FunctionComponent<TeamRolesProps> = ({\r\n    roles,\r\n    updateTeamRoles,\r\n    canUpdateTeamRoles,\r\n}) => {\r\n    const [teamRoles, setTeamRoles] = useState(roles);\r\n    const updateTeamRoleByIndex = (index: number, roleName: string) => {\r\n        const newRoles = [...teamRoles];\r\n        newRoles[index] = roleName;\r\n        setTeamRoles(newRoles);\r\n    };\r\n    const addTeamRole = () => {\r\n        setTeamRoles([...teamRoles, '']);\r\n    };\r\n    const removeTeamRole = (index: number) => {\r\n        setTeamRoles(teamRoles.filter((_, idx) => idx !== index));\r\n    };\r\n    const updateRoles = async () => {\r\n        if (validateRoles()) {\r\n            const updated = await updateTeamRoles(teamRoles);\r\n            if (updated) {\r\n                notification.success({\r\n                    message: 'Roles successfully updated!',\r\n                    placement: 'bottomRight',\r\n                });\r\n            } else {\r\n                notification.error({\r\n                    message: 'Something went wrong updating roles!',\r\n                    placement: 'bottomRight',\r\n                });\r\n            }\r\n        } else {\r\n            notification.error({\r\n                message: 'You cannot have roles which are empty!',\r\n                placement: 'bottomRight',\r\n            });\r\n        }\r\n    };\r\n    const validateRoles = () => {\r\n        return teamRoles.reduce((acc, role) => {\r\n            if (!role.length) {\r\n                return false;\r\n            }\r\n            return acc;\r\n        }, true);\r\n    };\r\n    return (\r\n        <div>\r\n            <PageHeader\r\n                title=\"Team Roles\"\r\n                subTitle={\r\n                    !canUpdateTeamRoles\r\n                        ? 'You do not have permissions to modify role permissions but can see them.'\r\n                        : undefined\r\n                }\r\n                className=\"team-settings__page-header\"\r\n            />\r\n            <Form name=\"dynamic_form_item\" {...formItemLayoutWithOutLabel}>\r\n                {teamRoles.map((role, index) => {\r\n                    return (\r\n                        <Form.Item\r\n                            {...formItemLayoutWithOutLabel}\r\n                            key={`role_${index}`}>\r\n                            <Form.Item noStyle>\r\n                                <Input\r\n                                    placeholder=\"Role Name\"\r\n                                    className=\"team-team-roles__input\"\r\n                                    value={role}\r\n                                    disabled={!canUpdateTeamRoles}\r\n                                    onChange={(ev) =>\r\n                                        updateTeamRoleByIndex(\r\n                                            index,\r\n                                            ev.currentTarget.value\r\n                                        )\r\n                                    }\r\n                                />\r\n                            </Form.Item>\r\n                            {index !== 0 && canUpdateTeamRoles ? (\r\n                                <MinusCircleOutlined\r\n                                    className=\"dynamic-delete-button team-team-roles__delete-icon\"\r\n                                    onClick={() => {\r\n                                        removeTeamRole(index);\r\n                                    }}\r\n                                />\r\n                            ) : null}\r\n                        </Form.Item>\r\n                    );\r\n                })}\r\n                {canUpdateTeamRoles ? (\r\n                    <Form.Item>\r\n                        <Button\r\n                            type=\"dashed\"\r\n                            onClick={() => {\r\n                                addTeamRole();\r\n                            }}\r\n                            style={{ width: '60%' }}>\r\n                            <PlusOutlined /> Add Role\r\n                        </Button>\r\n                    </Form.Item>\r\n                ) : null}\r\n                <Form.Item>\r\n                    <Button\r\n                        type=\"primary\"\r\n                        htmlType=\"submit\"\r\n                        disabled={!canUpdateTeamRoles}\r\n                        onClick={updateRoles}>\r\n                        Save\r\n                    </Button>\r\n                </Form.Item>\r\n            </Form>\r\n        </div>\r\n    );\r\n};\r\n\r\nconst mapStateToProps = (state: RootState) => ({\r\n    roles: state.team.roles,\r\n    canUpdateTeamRoles: hasTeamRole(state, PERM_UPDATE_TEAM_ROLES),\r\n});\r\n\r\nconst mapDispatchToProps = {\r\n    updateTeamRoles,\r\n};\r\n\r\nexport default connect(mapStateToProps, mapDispatchToProps)(TeamRoles);\r\n","import React, { useState } from 'react';\r\nimport { Transfer, Select, notification, PageHeader } from 'antd';\r\nimport { permissionLabels } from '../../../constants/permissions';\r\nimport { connect } from 'react-redux';\r\nimport { RootState } from '../../../store/configure';\r\nimport { updateTeamPermissions } from './../../../actions/team';\r\nimport hasTeamRole from '../../../helpers/hasTeamRole';\r\nimport { PERM_UPDATE_TEAM_PERMS } from './../../../constants/permissions';\r\nimport { RolePermission } from '../../../types/team';\r\n\r\nconst { Option } = Select;\r\n\r\ninterface RolePermissionsProps {\r\n    canUpdatePermissions: boolean;\r\n    roles: string[];\r\n    rolePermissions: RolePermission[];\r\n    updateTeamPermissions: Function;\r\n}\r\nconst RolePermissions: React.FunctionComponent<RolePermissionsProps> = ({\r\n    canUpdatePermissions,\r\n    roles,\r\n    rolePermissions,\r\n    updateTeamPermissions,\r\n}) => {\r\n    const [selectedRoleIndex, setSelectedRoleIndex] = useState(0);\r\n    let initialPermissions: string[] = [];\r\n    if (\r\n        rolePermissions[selectedRoleIndex] &&\r\n        rolePermissions[selectedRoleIndex].permissions\r\n    ) {\r\n        initialPermissions = rolePermissions[selectedRoleIndex].permissions;\r\n    }\r\n    const [targetKeys, setTargetKeys] = useState<string[]>(initialPermissions);\r\n    const data = Object.entries(permissionLabels).map(([key, label]) => {\r\n        return {\r\n            key,\r\n            label,\r\n        };\r\n    });\r\n\r\n    const handleSelectChange = async (value: any) => {\r\n        const index = roles.indexOf(value);\r\n\r\n        setSelectedRoleIndex(index);\r\n        if (rolePermissions[index]) {\r\n            setTargetKeys(rolePermissions[index].permissions);\r\n        } else {\r\n            setTargetKeys([]);\r\n        }\r\n    };\r\n\r\n    const handleTransferChange = async (targetKeys: string[]) => {\r\n        const updated = updateTeamPermissions(selectedRoleIndex, targetKeys);\r\n        if (updated) {\r\n            setTargetKeys(targetKeys);\r\n            notification.success({\r\n                message: `Updated permissions for role ${roles[selectedRoleIndex]}`,\r\n                placement: 'bottomRight',\r\n            });\r\n        }\r\n    };\r\n\r\n    return (\r\n        <div>\r\n            <PageHeader\r\n                title=\"Role Permissions\"\r\n                subTitle={\r\n                    !canUpdatePermissions\r\n                        ? 'You do not have permissions to modify role permissions but can see them.'\r\n                        : undefined\r\n                }\r\n                className=\"team-settings__page-header\"\r\n            />\r\n            <Select\r\n                defaultValue={roles[selectedRoleIndex]}\r\n                className=\"team-role-perms__role-select\"\r\n                onChange={handleSelectChange}>\r\n                {roles.map((role) => {\r\n                    return (\r\n                        <Option key={role} value={role}>\r\n                            {role}\r\n                        </Option>\r\n                    );\r\n                })}\r\n            </Select>\r\n            <Transfer\r\n                disabled={!canUpdatePermissions}\r\n                dataSource={data}\r\n                showSearch\r\n                listStyle={{\r\n                    width: '40%',\r\n                    height: 300,\r\n                }}\r\n                operations={['Add Role', 'Remove Role']}\r\n                targetKeys={targetKeys}\r\n                onChange={handleTransferChange}\r\n                render={(item) => `${item.label}`}\r\n            />\r\n        </div>\r\n    );\r\n};\r\n\r\nconst mapStateToProps = (state: RootState) => ({\r\n    canUpdatePermissions: hasTeamRole(state, PERM_UPDATE_TEAM_PERMS),\r\n    roles: state.team.roles,\r\n    rolePermissions: state.team.rolePermissions,\r\n});\r\n\r\nconst mapDispatchToProps = {\r\n    updateTeamPermissions,\r\n};\r\nexport default connect(mapStateToProps, mapDispatchToProps)(RolePermissions);\r\n","import React from 'react';\r\nimport SettingsPanel, {\r\n    SettingsPanelView,\r\n} from './../SettingsPanel/SettingsPanel';\r\nimport GeneralSettings from './views/GeneralSettings';\r\nimport TeamMembers from './views/TeamMembers';\r\nimport TeamRoles from './views/TeamRoles';\r\nimport RolePermissions from './views/RolePermissions';\r\nimport { TeamOutlined } from '@ant-design/icons';\r\n\r\nconst views: SettingsPanelView[] = [\r\n    {\r\n        key: 'general-settings',\r\n        label: 'General Settings',\r\n        icon: <TeamOutlined />,\r\n        viewComponent: <GeneralSettings />,\r\n    },\r\n    {\r\n        key: 'team-members',\r\n        label: 'Team Members',\r\n        icon: <TeamOutlined />,\r\n        viewComponent: <TeamMembers />,\r\n    },\r\n    {\r\n        key: 'team-roles',\r\n        label: 'Team Roles',\r\n        icon: <TeamOutlined />,\r\n        viewComponent: <TeamRoles />,\r\n    },\r\n    {\r\n        key: 'role-permissions',\r\n        label: 'Role Permissions',\r\n        icon: <TeamOutlined />,\r\n        viewComponent: <RolePermissions />,\r\n    },\r\n];\r\n\r\nconst UserSettings: React.FunctionComponent = () => {\r\n    return <SettingsPanel views={views} />;\r\n};\r\n\r\nexport default UserSettings;\r\n","import React from 'react';\r\nimport { PageHeader } from 'antd';\r\nimport TeamSettingsPanel from '../components/TeamSettingsPanel/TeamSettingsPanel';\r\n\r\nconst TeamSettings: React.FunctionComponent = () => {\r\n    return (\r\n        <div>\r\n            <PageHeader className=\"page__page-header\" title=\"Team Settings\" />\r\n            <TeamSettingsPanel />\r\n        </div>\r\n    );\r\n};\r\n\r\nexport default TeamSettings;\r\n","import React from 'react';\r\nimport { Card, Table, Tag } from 'antd';\r\nimport { Link } from 'react-router-dom';\r\nimport { TaskRow, TaskStatusColor } from '../../types/task';\r\nimport { User } from './../../types/user';\r\n\r\nconst columns = [\r\n    {\r\n        title: 'Title',\r\n        dataIndex: 'title',\r\n        render: ({\r\n            label,\r\n            projectId,\r\n            taskId,\r\n        }: {\r\n            label: string;\r\n            projectId: string;\r\n            taskId: string;\r\n        }) => <Link to={`/project/${projectId}/task/${taskId}`}>{label}</Link>,\r\n    },\r\n    {\r\n        title: 'Assignee',\r\n        dataIndex: 'assignee',\r\n        render: (assignee: User) => {\r\n            return assignee.email || 'Unassigned';\r\n        },\r\n    },\r\n    {\r\n        title: 'Status',\r\n        dataIndex: 'status',\r\n        render: (status: TaskStatusColor) => (\r\n            <Tag color={status.color}>{status.label}</Tag>\r\n        ),\r\n    },\r\n    {\r\n        title: 'Time Remaining',\r\n        dataIndex: 'timeRemaining',\r\n    },\r\n];\r\n\r\nconst ProjectView: React.FunctionComponent<{ tasks: TaskRow[] }> = ({\r\n    tasks,\r\n}) => {\r\n    return (\r\n        <div>\r\n            <Card title=\"Tasks\" size=\"small\">\r\n                <Table size=\"middle\" columns={columns} dataSource={tasks} />\r\n            </Card>\r\n        </div>\r\n    );\r\n};\r\n\r\nexport default ProjectView;\r\n","import { TaskStatusColor, TaskStatus, taskStatusLabel } from './../types/task';\r\n\r\nexport default (status: string): TaskStatusColor => {\r\n    switch (status) {\r\n        case TaskStatus.NOT_STARTED:\r\n            return {\r\n                color: 'red',\r\n                label: taskStatusLabel[TaskStatus.NOT_STARTED],\r\n            };\r\n        case TaskStatus.IN_PROGRESS:\r\n            return {\r\n                color: 'orange',\r\n                label: taskStatusLabel[TaskStatus.IN_PROGRESS],\r\n            };\r\n        case TaskStatus.PENDING_REVIEW:\r\n            return {\r\n                color: 'purple',\r\n                label: taskStatusLabel[TaskStatus.PENDING_REVIEW],\r\n            };\r\n        case TaskStatus.TESTING:\r\n            return {\r\n                color: 'blue',\r\n                label: taskStatusLabel[TaskStatus.TESTING],\r\n            };\r\n        case TaskStatus.DONE:\r\n            return {\r\n                color: 'green',\r\n                label: taskStatusLabel[TaskStatus.DONE],\r\n            };\r\n        default:\r\n            return {\r\n                color: 'red',\r\n                label: 'N/A',\r\n            };\r\n    }\r\n};\r\n","import React from 'react';\r\nimport { Form, Input, Select, InputNumber, AutoComplete, Button } from 'antd';\r\nimport { TaskStatus, taskStatusLabel } from '../../types/task';\r\nimport { Task } from './../../types/task';\r\nimport { connect } from 'react-redux';\r\nimport { RootState } from '../../store/configure';\r\nimport { Team } from '../../types/team';\r\nimport { Store } from 'antd/lib/form/interface';\r\n\r\ninterface TaskFormProps {\r\n    initialValues?: Task;\r\n    teamView: boolean;\r\n    onFormFinish: (task: Store) => void;\r\n    type: 'Add' | 'Edit';\r\n    team: Team;\r\n}\r\n\r\nconst TaskForm: React.FunctionComponent<TaskFormProps> = ({\r\n    initialValues,\r\n    teamView,\r\n    onFormFinish,\r\n    type,\r\n    team,\r\n}) => {\r\n    const [form] = Form.useForm();\r\n    let preFilledValues = {};\r\n    if (initialValues) {\r\n        const {\r\n            title,\r\n            description,\r\n            status,\r\n            estimatedHours,\r\n            assignee,\r\n        } = initialValues;\r\n        preFilledValues = {\r\n            assignee: assignee?.email,\r\n            title,\r\n            description,\r\n            status: status.label,\r\n            estimatedHours,\r\n        };\r\n    }\r\n    const users = team.users.map(({ user }) => {\r\n        return { value: user.username ? user.username : user.email };\r\n    });\r\n\r\n    const handleFinish = (values: Store) => {\r\n        const teamMember = team.users.find(({ user }) => {\r\n            return (\r\n                values.assignee === user.email ||\r\n                values.assignee === user.username\r\n            );\r\n        });\r\n        if (teamMember) {\r\n            values.assignee = teamMember.user._id;\r\n        } else {\r\n            values.assignee = undefined;\r\n        }\r\n        // If editing the form, status is prefilled with the label.\r\n        // If not editted, then we need to convert to the key\r\n        if (!Object.values(TaskStatus).includes(values.status)) {\r\n            const index = Object.values(taskStatusLabel).indexOf(values.status);\r\n            values.status = Object.keys(taskStatusLabel)[index];\r\n        }\r\n        onFormFinish(values);\r\n        form.resetFields();\r\n    };\r\n    return (\r\n        <>\r\n            <Form\r\n                form={form}\r\n                labelCol={{ span: 6 }}\r\n                wrapperCol={{ span: 16 }}\r\n                layout=\"horizontal\"\r\n                initialValues={preFilledValues ? preFilledValues : undefined}\r\n                onFinish={handleFinish}>\r\n                <Form.Item label=\"Title\" name=\"title\">\r\n                    <Input />\r\n                </Form.Item>\r\n                <Form.Item label=\"Description\" name=\"description\">\r\n                    <Input.TextArea />\r\n                </Form.Item>\r\n                {teamView ? (\r\n                    <Form.Item label=\"Assignee\" name=\"assignee\">\r\n                        <AutoComplete\r\n                            placeholder=\"Type a name here\"\r\n                            filterOption={(inputValue, option) =>\r\n                                option?.value\r\n                                    .toUpperCase()\r\n                                    .indexOf(inputValue.toUpperCase()) !== -1\r\n                            }\r\n                            options={users}\r\n                        />\r\n                    </Form.Item>\r\n                ) : null}\r\n                <Form.Item label=\"Hours\" name=\"estimatedHours\">\r\n                    <InputNumber />\r\n                </Form.Item>\r\n                <Form.Item label=\"Select\" name=\"status\">\r\n                    <Select>\r\n                        {Object.values(TaskStatus).map((status) => {\r\n                            return (\r\n                                <Select.Option key={status} value={status}>\r\n                                    {taskStatusLabel[status]}\r\n                                </Select.Option>\r\n                            );\r\n                        })}\r\n                    </Select>\r\n                </Form.Item>\r\n                <Form.Item>\r\n                    <Button type=\"primary\" htmlType=\"submit\">\r\n                        {`${type} Task`}\r\n                    </Button>\r\n                </Form.Item>\r\n            </Form>\r\n        </>\r\n    );\r\n};\r\n\r\nconst mapStateToProps = (state: RootState) => ({\r\n    team: state.team,\r\n});\r\n\r\nexport default connect(mapStateToProps)(TaskForm);\r\n","import React, { useState, useEffect } from 'react';\r\nimport { Button, Drawer, Form, Input, notification, Modal, Space } from 'antd';\r\nimport ProjectView from '../components/ProjectView/ProjectView';\r\nimport { PlusOutlined, EditOutlined } from '@ant-design/icons';\r\nimport { api } from './../services/api';\r\nimport { Project } from './../types/project';\r\nimport { useParams, useHistory } from 'react-router-dom';\r\nimport {\r\n    PATH_MY_PROJECTS,\r\n    PATH_TEAM_PROJECTS,\r\n} from './../constants/pageRoutes';\r\nimport { TaskRow } from '../types/task';\r\nimport mapProjectTasksToTaskRow from '../helpers/mapProjectTasksToTaskRow';\r\nimport TaskForm from './../components/TaskForm/TaskForm';\r\nimport { RootState } from '../store/configure';\r\nimport hasTeamRole from '../helpers/hasTeamRole';\r\nimport { connect } from 'react-redux';\r\nimport {\r\n    PERM_ADD_TASK,\r\n    PERM_EDIT_TEAM_PROJECT,\r\n    PERM_REMOVE_TEAM_PROJECT,\r\n} from './../constants/permissions';\r\nimport { Store } from 'antd/lib/form/interface';\r\nimport PageLayout from './../components/PageLayout/PageLayout';\r\nimport useToggle from './../hooks/useToggle';\r\nimport { User } from './../types/user';\r\n\r\nconst { confirm } = Modal;\r\n\r\ninterface ProjectPageProps {\r\n    canAddTeamTask: boolean;\r\n    canEditTeamProject: boolean;\r\n    canRemoveTeamProject: boolean;\r\n    user: User;\r\n}\r\n\r\nconst ProjectPage = ({\r\n    canAddTeamTask,\r\n    canEditTeamProject,\r\n    canRemoveTeamProject,\r\n    user,\r\n}: ProjectPageProps) => {\r\n    let { projectid } = useParams();\r\n    const history = useHistory();\r\n    const [project, setProject] = useState<Project>();\r\n    const [editProjectDrawerOpen, toggleEditProjectDrawer] = useToggle();\r\n    const [addTaskDrawerOpen, toggleAddTaskDrawer] = useToggle();\r\n    const [loading, setLoading] = useState(false);\r\n    const isOwnProject = project?.user === user._id;\r\n\r\n    const fetchProject = async () => {\r\n        try {\r\n            setLoading(true);\r\n            const res = await api(`/project/${projectid}`, 'GET');\r\n            if (res) {\r\n                setLoading(false);\r\n                setProject(res.project);\r\n            }\r\n        } catch (err) {\r\n            setLoading(false);\r\n        }\r\n    };\r\n\r\n    useEffect(() => {\r\n        fetchProject();\r\n    }, []);\r\n\r\n    let tasks: TaskRow[] = mapProjectTasksToTaskRow(project?.tasks, projectid);\r\n\r\n    const addTask = async ({\r\n        title,\r\n        description,\r\n        estimatedHours,\r\n        status,\r\n    }: Store) => {\r\n        const res = await api('/task', 'POST', {\r\n            project: project?._id,\r\n            title,\r\n            description,\r\n            estimatedHours,\r\n            status,\r\n        });\r\n\r\n        if (res) {\r\n            fetchProject();\r\n            toggleAddTaskDrawer(false);\r\n        }\r\n    };\r\n\r\n    const handleEditProjectFormFinish = async ({\r\n        title,\r\n        description,\r\n    }: Store) => {\r\n        const res = await api('/project', 'PUT', {\r\n            projectId: project?._id,\r\n            title,\r\n            description,\r\n        });\r\n        if (res.success) {\r\n            setProject(res.project);\r\n            toggleEditProjectDrawer(false);\r\n            notification.success({\r\n                message: 'Project edited successfully!',\r\n                placement: 'bottomRight',\r\n            });\r\n        } else {\r\n            notification.error({\r\n                message: 'You do not have permission to update this project.',\r\n                placement: 'bottomRight',\r\n            });\r\n        }\r\n    };\r\n\r\n    const handleDelete = () => {\r\n        confirm({\r\n            title: 'Remove Project',\r\n            content:\r\n                'This project and all tasks will be lost, are you sure you want to delete it?',\r\n            onOk: async () => {\r\n                const res = await api('/project', 'DELETE', {\r\n                    projectId: projectid,\r\n                });\r\n\r\n                if (res.success) {\r\n                    history.push(\r\n                        project?.team ? PATH_TEAM_PROJECTS : PATH_MY_PROJECTS\r\n                    );\r\n                    notification.success({\r\n                        message: 'Project has been successfully deleted!',\r\n                        placement: 'bottomRight',\r\n                    });\r\n                } else {\r\n                    notification.error({\r\n                        message:\r\n                            'You do not have permission to remove this project.',\r\n                        placement: 'bottomRight',\r\n                    });\r\n                }\r\n            },\r\n        });\r\n    };\r\n\r\n    const handleAddProjectDrawerClose = () => {\r\n        fetchProject();\r\n        toggleAddTaskDrawer();\r\n    };\r\n\r\n    const headerButtons = [];\r\n\r\n    if (isOwnProject || !project?.team || canEditTeamProject) {\r\n        headerButtons.push(\r\n            <Button key=\"1\" type=\"default\" onClick={toggleEditProjectDrawer}>\r\n                Edit Project\r\n                <EditOutlined />\r\n            </Button>\r\n        );\r\n    }\r\n\r\n    if (isOwnProject || !project?.team || canAddTeamTask) {\r\n        headerButtons.push(\r\n            <Button key=\"2\" type=\"primary\" onClick={toggleAddTaskDrawer}>\r\n                Add Task <PlusOutlined />\r\n            </Button>\r\n        );\r\n    }\r\n\r\n    return (\r\n        <>\r\n            <PageLayout\r\n                title={project?.title}\r\n                subTitle={project?.description}\r\n                loading={loading}\r\n                prevPagePath={PATH_MY_PROJECTS}\r\n                headerButtons={headerButtons}>\r\n                <ProjectView tasks={tasks} />\r\n            </PageLayout>\r\n            <Drawer\r\n                title=\"Edit Project\"\r\n                visible={editProjectDrawerOpen}\r\n                onClose={toggleEditProjectDrawer}\r\n                width=\"450\">\r\n                <Form\r\n                    name=\"editProject\"\r\n                    labelCol={{\r\n                        span: 5,\r\n                    }}\r\n                    wrapperCol={{\r\n                        span: 19,\r\n                    }}\r\n                    initialValues={{\r\n                        title: project?.title,\r\n                        description: project?.description,\r\n                    }}\r\n                    onFinish={handleEditProjectFormFinish}>\r\n                    <Form.Item\r\n                        label=\"Title\"\r\n                        name=\"title\"\r\n                        rules={[\r\n                            {\r\n                                required: true,\r\n                                message: 'You must have a project title.',\r\n                            },\r\n                            {\r\n                                min: 3,\r\n                                message:\r\n                                    'Your title must be at least 3 characters.',\r\n                            },\r\n                        ]}>\r\n                        <Input />\r\n                    </Form.Item>\r\n                    <Form.Item label=\"Description\" name=\"description\">\r\n                        <Input.TextArea />\r\n                    </Form.Item>\r\n\r\n                    <Form.Item>\r\n                        <Space>\r\n                            <Button type=\"primary\" htmlType=\"submit\">\r\n                                Edit Project\r\n                            </Button>\r\n                            {canRemoveTeamProject && (\r\n                                <Button danger onClick={handleDelete}>\r\n                                    Remove Project\r\n                                </Button>\r\n                            )}\r\n                        </Space>\r\n                    </Form.Item>\r\n                </Form>\r\n            </Drawer>\r\n            <Drawer\r\n                title=\"Add Task To Project\"\r\n                visible={addTaskDrawerOpen}\r\n                onClose={handleAddProjectDrawerClose}\r\n                width=\"450\">\r\n                <TaskForm teamView={false} onFormFinish={addTask} type=\"Add\" />\r\n            </Drawer>\r\n        </>\r\n    );\r\n};\r\n\r\nconst mapStateToProps = (state: RootState) => ({\r\n    canAddTeamTask: hasTeamRole(state, PERM_ADD_TASK),\r\n    canEditTeamProject: hasTeamRole(state, PERM_EDIT_TEAM_PROJECT),\r\n    canRemoveTeamProject: hasTeamRole(state, PERM_REMOVE_TEAM_PROJECT),\r\n    user: state.user,\r\n});\r\n\r\nexport default connect(mapStateToProps)(ProjectPage);\r\n","import { TaskRow } from '../types/task';\r\nimport getTaskStatusColourObj from './getTaskStatusColourObj';\r\n\r\n// tasks any as it's coming from the api\r\nexport default (tasks: any, projectId: string): TaskRow[] => {\r\n    if (!tasks) return [];\r\n    return (\r\n        tasks.map((projectTask: any) => {\r\n            return {\r\n                key: projectTask._id,\r\n                title: {\r\n                    label: projectTask.title,\r\n                    projectId,\r\n                    taskId: projectTask._id,\r\n                },\r\n                description: projectTask.description,\r\n                status: getTaskStatusColourObj(projectTask.status),\r\n                assignee: projectTask.assignee\r\n                    ? projectTask.assignee\r\n                    : 'Unassigned',\r\n                timeRemaining: projectTask.estimatedHours,\r\n            };\r\n        }) || []\r\n    );\r\n};\r\n","import React from 'react';\r\nimport { Card, Form, Button, notification, Input } from 'antd';\r\nimport { createTeam } from '../actions/team';\r\nimport { connect } from 'react-redux';\r\nimport { useHistory, Redirect } from 'react-router-dom';\r\nimport {\r\n    PATH_TEAM_PROFILE,\r\n    PATH_TEAM_PROJECTS,\r\n} from './../constants/pageRoutes';\r\nimport { RootState } from '../store/configure';\r\nimport hasTeam from '../helpers/hasTeam';\r\n\r\nconst layout = {\r\n    labelCol: { span: 8 },\r\n    wrapperCol: { span: 16 },\r\n};\r\nconst tailLayout = {\r\n    wrapperCol: { offset: 8, span: 16 },\r\n};\r\n\r\nconst CreateTeamPage: React.FunctionComponent<{\r\n    createTeam: Function;\r\n    hasTeamFromState: boolean;\r\n}> = ({ createTeam, hasTeamFromState }) => {\r\n    const history = useHistory();\r\n\r\n    if (hasTeamFromState) {\r\n        return <Redirect to={PATH_TEAM_PROJECTS} />;\r\n    }\r\n\r\n    return (\r\n        <div>\r\n            <Card title=\"Create Team\">\r\n                <Form\r\n                    {...layout}\r\n                    name=\"basic\"\r\n                    initialValues={{ remember: true }}\r\n                    onFinish={async ({ teamName, teamDesc }) => {\r\n                        const done = await createTeam({\r\n                            name: teamName,\r\n                            description: teamDesc,\r\n                        });\r\n                        if (done) {\r\n                            notification.success({\r\n                                message: 'Team Created',\r\n                                placement: 'bottomRight',\r\n                            });\r\n                            history.push(PATH_TEAM_PROJECTS); //TODO: to profile when it exists\r\n                        }\r\n                    }}>\r\n                    <Form.Item label=\"Team Name\" name=\"teamName\">\r\n                        <Input />\r\n                    </Form.Item>\r\n\r\n                    <Form.Item label=\"Team Description\" name=\"teamDesc\">\r\n                        <Input.TextArea />\r\n                    </Form.Item>\r\n                    <Form.Item {...tailLayout}>\r\n                        <Button type=\"primary\" htmlType=\"submit\">\r\n                            Create Team\r\n                        </Button>\r\n                    </Form.Item>\r\n                </Form>\r\n            </Card>\r\n        </div>\r\n    );\r\n};\r\n\r\nconst mapStateToProps = (state: RootState) => {\r\n    return {\r\n        hasTeamFromState: hasTeam(state),\r\n    };\r\n};\r\n\r\nconst mapDispatchToProps = {\r\n    createTeam: createTeam,\r\n};\r\n\r\nexport default connect(mapStateToProps, mapDispatchToProps)(CreateTeamPage);\r\n","import React from 'react';\r\nimport { Card, Typography, Row, Col, Tag, Result, Button } from 'antd';\r\nimport { Task } from './../../types/task';\r\nimport { useHistory } from 'react-router-dom';\r\nimport { PATH_HOME } from './../../constants/pageRoutes';\r\n\r\nconst { Paragraph, Text, Link } = Typography;\r\n// const data = [\r\n//     {\r\n//         author: 'Han Solo',\r\n//         avatar:\r\n//             'https://zos.alipayobjects.com/rmsportal/ODTLcjxAfvqbxHnVXCYX.png',\r\n//         content: (\r\n//             <p>\r\n//                 We supply a series of design principles, practical patterns and\r\n//                 high quality design resources (Sketch and Axure), to help people\r\n//                 create their product prototypes beautifully and efficiently.\r\n//             </p>\r\n//         ),\r\n//         datetime: (\r\n//             <Tooltip title={'15/08/2020 18:45'}>\r\n//                 <span>2 Days Ago</span>\r\n//             </Tooltip>\r\n//         ),\r\n//     },\r\n//     {\r\n//         author: 'Han Solo',\r\n//         avatar:\r\n//             'https://zos.alipayobjects.com/rmsportal/ODTLcjxAfvqbxHnVXCYX.png',\r\n//         content: (\r\n//             <p>\r\n//                 We supply a series of design principles, practical patterns and\r\n//                 high quality design resources (Sketch and Axure), to help people\r\n//                 create their product prototypes beautifully and efficiently.\r\n//             </p>\r\n//         ),\r\n//         datetime: (\r\n//             <Tooltip title={'15/08/2020 18:45'}>\r\n//                 <span>2 Days Ago</span>\r\n//             </Tooltip>\r\n//         ),\r\n//     },\r\n// ];\r\n\r\ninterface TaskViewProps {\r\n    task?: Task;\r\n}\r\n\r\nconst TaskView: React.FunctionComponent<TaskViewProps> = ({ task }) => {\r\n    const history = useHistory();\r\n    if (!task) {\r\n        return (\r\n            <Result\r\n                status=\"warning\"\r\n                title=\"This task does not exist!.\"\r\n                extra={\r\n                    <Button\r\n                        type=\"primary\"\r\n                        key=\"console\"\r\n                        onClick={() => {\r\n                            history.push(PATH_HOME);\r\n                        }}>\r\n                        Back to dashboard\r\n                    </Button>\r\n                }\r\n            />\r\n        );\r\n    }\r\n\r\n    return (\r\n        <>\r\n            <Card size=\"small\" className=\"task-view\">\r\n                <Row>\r\n                    <Col span={8}>\r\n                        <Text strong className=\"task-view__assignee\">\r\n                            Assignee:\r\n                        </Text>\r\n                        <Link>\r\n                            {task.assignee ? task.assignee.email : 'Unassigned'}\r\n                        </Link>\r\n                    </Col>\r\n                    <Col span={8}>\r\n                        <Text strong className=\"task-view__status\">\r\n                            Status:\r\n                        </Text>\r\n                        <Tag color={task.status.color}>{task.status.label}</Tag>\r\n                    </Col>\r\n                    <Col span={8}>\r\n                        <Text strong className=\"task-view__time\">\r\n                            Estimated Time Remaining:\r\n                        </Text>\r\n                        <Text>{task.estimatedHours}</Text>\r\n                    </Col>\r\n                </Row>\r\n            </Card>\r\n            <Card size=\"small\" className=\"task-view__description\">\r\n                <Paragraph\r\n                    ellipsis={{ rows: 2, expandable: true, symbol: 'more' }}>\r\n                    {task.description}\r\n                </Paragraph>\r\n            </Card>\r\n            {/* <Row gutter={[16, 16]}>\r\n                <Col span={8}>\r\n                    <Card title=\"Work Log\" size=\"small\">\r\n                        <Timeline>\r\n                            <Timeline.Item>\r\n                                John Smith / 3 Hours / 14-08-2020\r\n                            </Timeline.Item>\r\n                            <Timeline.Item>\r\n                                John Smith / 1 Hours / 13-08-2020\r\n                            </Timeline.Item>\r\n                            <Timeline.Item>\r\n                                Mike Johnson / 2 Hours / 11-08-2020\r\n                            </Timeline.Item>\r\n                            <Timeline.Item>\r\n                                Sarah Green / 4 Hours / 10-08-2020\r\n                            </Timeline.Item>\r\n                        </Timeline>\r\n                    </Card>\r\n                </Col>\r\n                <Col span={16}>\r\n                    <Card\r\n                        title={`Comments (${data.length} replies)`}\r\n                        size=\"small\">\r\n                        <List\r\n                            className=\"comment-list\"\r\n                            itemLayout=\"horizontal\"\r\n                            dataSource={data}\r\n                            renderItem={(item) => (\r\n                                <li>\r\n                                    <Comment\r\n                                        author={item.author}\r\n                                        avatar={item.avatar}\r\n                                        content={item.content}\r\n                                        datetime={item.datetime}\r\n                                    />\r\n                                </li>\r\n                            )}\r\n                        />\r\n                        <Form.Item>\r\n                            <Input.TextArea rows={4} onChange={() => {}} />\r\n                        </Form.Item>\r\n                        <Form.Item>\r\n                            <Button\r\n                                htmlType=\"submit\"\r\n                                loading={false}\r\n                                onClick={() => {}}\r\n                                type=\"primary\">\r\n                                Add Comment\r\n                            </Button>\r\n                        </Form.Item>\r\n                    </Card>\r\n                </Col>\r\n            </Row> */}\r\n        </>\r\n    );\r\n};\r\n\r\nexport default TaskView;\r\n","import React, { useState, useEffect } from 'react';\r\nimport { Button, Drawer, notification, Modal } from 'antd';\r\nimport TaskView from '../components/TaskView/TaskView';\r\nimport { ArrowRightOutlined, EditOutlined } from '@ant-design/icons';\r\nimport { useParams, useHistory } from 'react-router-dom';\r\nimport { fetchTask, updateTask } from './../actions/task';\r\nimport { Task, TaskStatus, taskStatusLabel } from './../types/task';\r\nimport TaskForm from './../components/TaskForm/TaskForm';\r\nimport { api } from './../services/api';\r\nimport { connect } from 'react-redux';\r\nimport { RootState } from '../store/configure';\r\nimport hasTeamRole from '../helpers/hasTeamRole';\r\nimport {\r\n    PERM_EDIT_OTHER_TASK,\r\n    PERM_DELETE_OTHER_TASK,\r\n} from '../constants/permissions';\r\nimport { User } from './../types/user';\r\nimport PageLayout from '../components/PageLayout/PageLayout';\r\nimport useToggle from './../hooks/useToggle';\r\n\r\nconst { confirm } = Modal;\r\n\r\ninterface TaskPageProps {\r\n    loggedInUser: User;\r\n    canEditOthersTasks: boolean;\r\n    canDeleteOthersTasks: boolean;\r\n}\r\nconst TaskPage = ({\r\n    loggedInUser,\r\n    canEditOthersTasks,\r\n    canDeleteOthersTasks,\r\n}: TaskPageProps) => {\r\n    let { projectid, taskid } = useParams();\r\n    const history = useHistory();\r\n    const [modalVisible, toggleModal] = useToggle();\r\n    const [task, setTask] = useState<Task | undefined>();\r\n    const createdByLoggedInUser = task?.createdBy === loggedInUser._id;\r\n    const [loading, setLoading] = useState(false);\r\n\r\n    useEffect(() => {\r\n        setLoading(true);\r\n        fetchTask(taskid)\r\n            .then((task) => {\r\n                setLoading(false);\r\n                setTask(task);\r\n            })\r\n            .catch(() => {\r\n                setLoading(false);\r\n                setTask(undefined);\r\n            });\r\n    }, [taskid]);\r\n\r\n    const handleEditTask = (values: Parameters<typeof updateTask>[1]) => {\r\n        updateTask(taskid, values)\r\n            .then((task) => {\r\n                notification.success({\r\n                    message: 'Task updated successfully!',\r\n                    placement: 'bottomRight',\r\n                });\r\n                setTask(task);\r\n            })\r\n            .catch((e) => {\r\n                notification.error({\r\n                    message: 'Something went wrong updating!',\r\n                    placement: 'bottomRight',\r\n                });\r\n                setTask(undefined);\r\n            })\r\n            .finally(() => toggleModal(false));\r\n    };\r\n\r\n    let headerButtons = [];\r\n\r\n    if (createdByLoggedInUser || canEditOthersTasks) {\r\n        headerButtons.push(\r\n            <Button key=\"editTask\" onClick={toggleModal}>\r\n                Edit Task <EditOutlined />\r\n            </Button>\r\n        );\r\n    }\r\n\r\n    if (task) {\r\n        const statuses = Object.values(TaskStatus);\r\n        const indexOfCurrentStatus = Object.values(taskStatusLabel).indexOf(\r\n            task.status.label\r\n        );\r\n\r\n        const canMoveToNextStatus =\r\n            indexOfCurrentStatus + 1 <= statuses.length - 1;\r\n\r\n        if (canMoveToNextStatus) {\r\n            const nextStatus = statuses[indexOfCurrentStatus + 1];\r\n            const nextStatusLabel = `Move to ${taskStatusLabel[nextStatus]}`;\r\n            headerButtons = [\r\n                ...headerButtons,\r\n                <Button\r\n                    type=\"primary\"\r\n                    key=\"nextStatus\"\r\n                    onClick={() => handleEditTask({ status: nextStatus })}>\r\n                    {nextStatusLabel}\r\n                    <ArrowRightOutlined />\r\n                </Button>,\r\n            ];\r\n        }\r\n    }\r\n\r\n    return (\r\n        <>\r\n            <PageLayout\r\n                title={task?.title}\r\n                prevPagePath={`/project/${projectid}`}\r\n                headerButtons={headerButtons}\r\n                loading={loading}>\r\n                <TaskView task={task} />\r\n            </PageLayout>\r\n            <Drawer\r\n                title=\"Edit Project Task\"\r\n                visible={modalVisible}\r\n                onClose={toggleModal}\r\n                width=\"450\">\r\n                <TaskForm\r\n                    onFormFinish={async (values) => {\r\n                        toggleModal(false);\r\n                        handleEditTask(values);\r\n                    }}\r\n                    type=\"Edit\"\r\n                    initialValues={task}\r\n                    teamView={!!task?.project.team}\r\n                />\r\n                {(createdByLoggedInUser || canDeleteOthersTasks) && (\r\n                    <Button\r\n                        danger\r\n                        onClick={() => {\r\n                            confirm({\r\n                                title: 'Delete Task',\r\n                                content:\r\n                                    'Are you sure you want to delete this task?',\r\n                                onOk: async () => {\r\n                                    const res = await api(\r\n                                        `/task/${taskid}`,\r\n                                        'DELETE'\r\n                                    );\r\n                                    if (res) {\r\n                                        toggleModal(false);\r\n                                        notification.success({\r\n                                            message: 'Task deleted!',\r\n                                            placement: 'bottomRight',\r\n                                        });\r\n                                        history.push(`/project/${projectid}`);\r\n                                    }\r\n                                },\r\n                            });\r\n                        }}>\r\n                        Delete Task\r\n                    </Button>\r\n                )}\r\n            </Drawer>\r\n        </>\r\n    );\r\n};\r\n\r\nconst mapStateToProps = (state: RootState) => ({\r\n    loggedInUser: state.user,\r\n    canEditOthersTasks: hasTeamRole(state, PERM_EDIT_OTHER_TASK),\r\n    canDeleteOthersTasks: hasTeamRole(state, PERM_DELETE_OTHER_TASK),\r\n});\r\n\r\nexport default connect(mapStateToProps)(TaskPage);\r\n","import { Task, TaskStatus } from './../types/task';\r\nimport { api } from './../services/api';\r\nimport getTaskStatusColourObj from '../helpers/getTaskStatusColourObj';\r\n\r\nexport const fetchTask = (taskId: string): Promise<Task | undefined> => {\r\n    return new Promise(async (resolve, reject) => {\r\n        try {\r\n            const res = await api(`/task/${taskId}`, 'GET');\r\n\r\n            if (res) {\r\n                const task: Task = {\r\n                    title: res.task.title,\r\n                    description: res.task.description,\r\n                    assignee: res.task.assignee,\r\n                    estimatedHours: res.task.estimatedHours,\r\n                    project: res.task.project,\r\n                    status: getTaskStatusColourObj(res.task.status),\r\n                    createdBy: res.task.createdBy,\r\n                };\r\n                resolve(task);\r\n            } else {\r\n                reject(undefined);\r\n            }\r\n        } catch (err) {\r\n            reject(undefined);\r\n        }\r\n    });\r\n};\r\n\r\nexport const updateTask = (\r\n    taskId: string,\r\n    updates: {\r\n        title?: string;\r\n        description?: string;\r\n        status?: TaskStatus;\r\n        assignee?: string;\r\n        estimatedHours?: number;\r\n    }\r\n): Promise<Task | undefined> => {\r\n    return new Promise(async (resolve, reject) => {\r\n        try {\r\n            const res = await api(`/task/${taskId}`, 'PUT', updates);\r\n\r\n            if (res) {\r\n                const task: Task = {\r\n                    title: res.task.title,\r\n                    description: res.task.description,\r\n                    assignee: res.task.assignee,\r\n                    estimatedHours: res.task.estimatedHours,\r\n                    project: res.task.project,\r\n                    status: getTaskStatusColourObj(res.task.status),\r\n                    createdBy: res.task.createdBy,\r\n                };\r\n                resolve(task);\r\n            } else {\r\n                reject(undefined);\r\n            }\r\n        } catch (err) {\r\n            reject(undefined);\r\n        }\r\n    });\r\n};\r\n","import React from 'react';\r\nimport {\r\n    Route,\r\n    Redirect,\r\n    RouteProps,\r\n} from 'react-router-dom';\r\nimport { connect } from 'react-redux';\r\nimport isLoggedIn from '../../helpers/isLoggedIn';\r\nimport { RootState } from '../../store/configure';\r\nimport * as H from 'history';\r\n\r\ninterface PrivateRouteProps extends RouteProps {\r\n    isLoggedIn: boolean;\r\n}\r\n\r\nexport const PrivateRoute: React.FunctionComponent<PrivateRouteProps> = ({\r\n    isLoggedIn,\r\n    children,\r\n    ...rest\r\n}) => {\r\n    return <Route {...rest} render={privateRouteRender(isLoggedIn, children)} />;\r\n};\r\n\r\nexport interface PrivateRouteRenderProps {\r\n    location: H.Location<any>;\r\n}\r\n\r\nexport const privateRouteRender = (\r\n    isLoggedIn: boolean,\r\n    children: React.ReactNode\r\n) => {\r\n    return (props: PrivateRouteRenderProps) : React.ReactNode => {\r\n        if (!isLoggedIn) {\r\n            return (\r\n                <Redirect\r\n                    to={{ pathname: '/login', state: { from: props.location } }}\r\n                />\r\n            );\r\n        }\r\n\r\n        return children;\r\n    };\r\n};\r\n\r\nexport const mapStateToProps = (state: RootState) => {\r\n    return {\r\n        isLoggedIn: isLoggedIn(state.auth.token),\r\n    };\r\n};\r\n\r\nexport default connect(mapStateToProps)(PrivateRoute);\r\n","import React from 'react';\r\nimport { Route, Redirect, RouteProps } from 'react-router-dom';\r\nimport { connect } from 'react-redux';\r\nimport isLoggedIn from '../../helpers/isLoggedIn';\r\nimport { RootState } from '../../store/configure';\r\nimport * as H from 'history';\r\n\r\ninterface PublicRouteProps extends RouteProps {\r\n    isLoggedIn: boolean;\r\n}\r\n\r\nexport const PublicRoute: React.FunctionComponent<PublicRouteProps> = ({\r\n    isLoggedIn,\r\n    children,\r\n    ...rest\r\n}) => {\r\n    return <Route {...rest} render={publicRouteRender(isLoggedIn, children)} />;\r\n};\r\n\r\nexport interface PublicRouteRenderProps {\r\n    location: H.Location<any>;\r\n}\r\n\r\nexport const publicRouteRender = (\r\n    isLoggedIn: boolean,\r\n    children: React.ReactNode\r\n) => {\r\n    return (props: PublicRouteRenderProps) : React.ReactNode => {\r\n        if (isLoggedIn) {\r\n            return (\r\n                <Redirect\r\n                    to={{ pathname: '/', state: { from: props.location } }}\r\n                />\r\n            );\r\n        }\r\n\r\n        return children;\r\n    };\r\n};\r\n\r\nexport const mapStateToProps = (state: RootState) => {\r\n    return {\r\n        isLoggedIn: isLoggedIn(state.auth.token),\r\n    };\r\n};\r\n\r\nexport default connect(mapStateToProps)(PublicRoute);\r\n","import React from 'react';\r\nimport { BrowserRouter as Router, Switch } from 'react-router-dom';\r\n\r\nimport AppLayout from './../AppLayout/AppLayout';\r\n\r\nimport Home from '../../pages/Home';\r\nimport Register from '../../pages/Register';\r\nimport Login from '../../pages/Login';\r\nimport MyProfile from './../../pages/MyProfile';\r\nimport AccountSettings from './../../pages/AccountSettings';\r\nimport MyProjects from './../../pages/MyProjects';\r\nimport TeamProfile from './../../pages/TeamProfile';\r\nimport TeamProjects from './../../pages/TeamProjects';\r\nimport TeamSettings from './../../pages/TeamSettings';\r\nimport ProjectPage from './../../pages/ProjectPage';\r\nimport CreateTeam from './../../pages/CreateTeam';\r\nimport TaskPage from './../../pages/TaskPage';\r\n\r\nimport PrivateRoute from './PrivateRoute';\r\nimport PublicRoute from './PublicRoute';\r\n\r\nimport {\r\n    PATH_HOME,\r\n    PATH_LOGIN,\r\n    PATH_REGISTER,\r\n    PATH_MY_PROFILE,\r\n    PATH_ACCOUNT_SETTINGS,\r\n    PATH_MY_PROJECTS,\r\n    PATH_TEAM_PROFILE,\r\n    PATH_TEAM_PROJECTS,\r\n    PATH_TEAM_SETTINGS,\r\n    PATH_PROJECT_PAGE,\r\n    PATH_TASK_PAGE,\r\n    PATH_TEAM_CREATE,\r\n} from './../../constants/pageRoutes';\r\n\r\nconst AppRouter: React.FunctionComponent = ({ children }) => {\r\n    return (\r\n        <Router>\r\n            {children}\r\n            <AppLayout>\r\n                <Switch>\r\n                    <PrivateRoute exact path={PATH_HOME}>\r\n                        <Home />\r\n                    </PrivateRoute>\r\n                    <PublicRoute path={PATH_REGISTER}>\r\n                        <Register />\r\n                    </PublicRoute>\r\n                    <PublicRoute path={PATH_LOGIN}>\r\n                        <Login />\r\n                    </PublicRoute>\r\n                    <PrivateRoute path={PATH_MY_PROFILE}>\r\n                        <MyProfile />\r\n                    </PrivateRoute>\r\n                    <PrivateRoute path={PATH_MY_PROJECTS}>\r\n                        <MyProjects />\r\n                    </PrivateRoute>\r\n                    <PrivateRoute path={PATH_ACCOUNT_SETTINGS}>\r\n                        <AccountSettings />\r\n                    </PrivateRoute>\r\n                    <PrivateRoute exact path={PATH_TEAM_PROFILE}>\r\n                        <TeamProfile />\r\n                    </PrivateRoute>\r\n                    <PrivateRoute exact path={PATH_TEAM_CREATE}>\r\n                        <CreateTeam />\r\n                    </PrivateRoute>\r\n                    <PrivateRoute path={PATH_TEAM_PROJECTS}>\r\n                        <TeamProjects />\r\n                    </PrivateRoute>\r\n                    <PrivateRoute path={PATH_TEAM_SETTINGS}>\r\n                        <TeamSettings />\r\n                    </PrivateRoute>\r\n                    <PrivateRoute exact path={PATH_PROJECT_PAGE}>\r\n                        <ProjectPage />\r\n                    </PrivateRoute>\r\n                    <PrivateRoute path={PATH_TASK_PAGE}>\r\n                        <TaskPage />\r\n                    </PrivateRoute>\r\n                </Switch>\r\n            </AppLayout>\r\n        </Router>\r\n    );\r\n};\r\n\r\nexport default AppRouter;\r\n","import React from 'react';\r\nimport { connect } from 'react-redux';\r\n\r\nimport { initialise } from './actions/initialise';\r\n\r\nimport AppRouter from './components/Router/AppRouter';\r\nimport 'antd/dist/antd.css';\r\nimport './styles.scss';\r\n\r\ninterface AppProps {\r\n    initialise: Function;\r\n}\r\n\r\nexport const App: React.FunctionComponent<AppProps> = ({ initialise }) => {\r\n    initialise();\r\n\r\n    return <AppRouter />;\r\n};\r\n\r\nconst mapDispatchToProps = { initialise };\r\n\r\nexport default connect(undefined, mapDispatchToProps)(App);\r\n","import React from 'react';\r\nimport ReactDOM from 'react-dom';\r\nimport { Provider } from 'react-redux';\r\nimport store from './store/configure';\r\n\r\nimport App from './App';\r\n\r\nReactDOM.render(\r\n    // <StrictMode> commented out until the antd team fixes deprecated code\r\n        <Provider store={store} >\r\n            <App />\r\n        </Provider>\r\n    // </StrictMode> \r\n    ,\r\n    document.getElementById('root')\r\n);\r\n"],"sourceRoot":""}